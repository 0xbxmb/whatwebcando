// jshint devel:true

(function (global) {
  'use strict';

  let Feature = global.WWCD.Feature || require('./feature').WWCD.Feature;

  let features = {
    localNotifications: new Feature({
      id: 'local-notifications',
      icon: 'mdi-notification-system-update',
      name: 'Local notifications',
      description: [`Notifications, available through <b>Notifications API</b>, allow the authorized web applications to draw users attention
       in a bold but standardized fashion. Notifications are generated by the web application running in a browsers' tab to be presented
       to the user outside of the browser tab area.`,
        `Sadly, due to Android limitations, Chrome - the only browser on Android that implemented the feature - removed support for this API in favor of
       persistent Service Worker-based notifications, leaving the API available but effectively doing nothing.
       See <a href="/push-notifications.html">Push Notifications</a> for more complex, but working alternative.`],
      api: `<dl>
        <dt><code>Notification.requestPermission(callback)</code></dt>
        <dd>Asks a user for the permission to show Notifications, calls <code>callback</code> with the prompt result.</dd>
        <dt><code>Notification.permission</code></dt>
        <dd>Returns current permission state - <code>granted</code> or <code>denied</code>.</dd>
        <dt><code>new Notification(title, [options])</code></dt>
        <dd>Displays local notification outside of the browser tab area.</dd>
      </dl>`,
      caniuse: 'notifications',
      supported: Feature.windowContains('Notification'),
      demoPen: 'yYJdWO',
      links: [
        {url: 'https://addons.mozilla.org/en-us/firefox/addon/221523/', ignore: true},
        {url: 'http://www.html5rocks.com/tutorials/notifications/quick/', ignore: true},
        {url: 'http://aurelio.audero.it/demo/web-notifications-api-demo.html', ignore: true},
        {
          url: 'https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/BygptYClroM',
          title: 'PSA: Android is *only* shipping Service Worker-based Notifications'
        }
      ]
    }),

    pushNotifications: new Feature({
      id: 'push-notifications',
      icon: 'mdi-notification-tap-and-play',
      name: 'Push notifications',
      description: [`Remote Push Notifications allow web applications to subscribe the user to the re-engagement mechanism
       that can show a message to the subscriber even if the web application is not currently opened in the browser. This utilizes the powerful concept
       of <b><a href="/background-tasks.html">Service Workers</a></b>, code units installable by the web app that execute separately in the background.`,
        `Currently works in Chrome only and requires <a href="https://developers.google.com/cloud-messaging/">GCM</a> setup and HTTPS installation.`],
      api: `<dl>
        <dt><code>serviceWorkerRegistration.pushManager.subscribe()</code></dt>
        <dd>Subscribes a user for the remote Push Notifications. Returns a <code>Promise</code>.</dd>
        <dt><code>serviceWorkerRegistration.pushManager.getSubscription()</code></dt>
        <dd>Returns a <code>Promise</code> indicating current Push Notification subscription state.</dd>
        <dt><code>serviceWorkerRegistration.showNotification(title, [options])</code></dt>
        <dd>Displays notification outside of the browser tab area.</dd>
        <dt><code>serviceWorker.addEventListener('push', listener)</code></dt>
        <dd>Event triggered on remote Push Notification, available within Service Worker instance.</dd>
      </dl>`,
      caniuse: 'serviceworkers',
      supported: Feature.navigatorContains('serviceWorker') && Feature.windowContains('PushManager') && Feature.containedIn(ServiceWorkerRegistration.prototype, 'showNotification'),
      links: [
        {url: 'http://www.html5rocks.com/en/tutorials/service-worker/introduction/', ignore: true},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker_API', ignore: true},
        {url: 'https://jakearchibald.github.io/isserviceworkerready/resources.html', ignore: true},
        {
          url: 'https://developers.google.com/web/updates/2015/03/push-notificatons-on-the-open-web',
          title: 'Push Notifications on the Open Web - Chrome tutorial'
        },
        {url: 'https://goroost.com/try-chrome-push-notifications', title: 'Chrome Push Notifications demo'}
      ]
    }),

    backgroundTasks: new Feature({
      id: 'background-tasks',
      icon: 'mdi-action-settings-applications',
      name: 'Background processing',
      description: `Web applications running on HTTPS can request the browser to install the separate code unit called <b>Service Worker</b>.
       This unit is then run in a separate thread off the owning web application, communicating via events and messages.
       It provides a possibility to execute code regardless of the main application state, i.e. when it is not opened.
       Use cases might include prefetching and caching the data, long processing etc.`,
      api: `<dl>
        <dt><code>navigator.serviceWorker.register(path)</code></dt>
        <dd>Installs the Service Worker code available under <code>path</code>. Returns a <code>Promise</code>.</dd>
        <dt><code>navigator.serviceWorker.ready</code></dt>
        <dd>Returns a <code>Promise</code> resolved with <code>serviceWorkerRegistration</code> when the Worker is initialized.</dd>
        <dt><code>serviceWorkerRegistration.update()</code></dt>
        <dd>Checks the server for an updated version of the Service Worker without consulting caches.</dd>
        <dt><code>serviceWorkerRegistration.unregister()</code></dt>
        <dd>Uninstalls the Service Worker.</dd>
      </dl>`,
      caniuse: 'serviceworkers',
      supported: Feature.navigatorContains('serviceWorker'),
      links: [
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker_API', title: 'ServiceWorker API - MDN docs'},
        {
          url: 'https://googlechrome.github.io/samples/service-worker/prefetch/index.html',
          title: 'Service Worker Sample: Pre-fetching Resources During Registration'
        }
      ]
    }),

    touch: new Feature({
      id: 'touch',
      icon: 'mdi-content-gesture',
      name: 'Touch gestures',
      description: [`Traditionally, web relies on mouse and keyboard as the only input devices, while mobile devices are mostly controlled by touch.
        Mobile web started with a bit touchy solution of translating touch events to mouse events like <code>mousedown</code>.`,
        `Newer HTML5 approach is to embrace touch as the first-class input mean, allowing web applications to intercept and identify complex multitouch
         gestures, free-hand drawing etc. Unfortunately, the support is twofold - either via touch events like <code>touchstart</code> that were first
         introduced by Apple and standardized later as a de-facto solution, when other vendors went the same route, or via the newer,
         more general <b>Pointer Events</b> specification.`],
      api: `<dl>
        <dt><code>element.addEventListener('touchstart', listener)</code></dt>
        <dd>Event triggered when the finger is placed on a DOM element.</dd>
        <dt><code>element.addEventListener('touchmove', listener)</code></dt>
        <dd>Event triggered when the finger is dragged along a DOM element.</dd>
        <dt><code>element.addEventListener('touchend', listener)</code></dt>
        <dd>Event triggered when the finger is removed from a DOM element.</dd>
      </dl>`,
      caniuse: 'touch',
      demoPen: 'LpbVoV',
      supported: Feature.windowContains('ontouchstart'),
      links: [
        {url: 'http://www.html5rocks.com/en/mobile/touch/', title: 'Multi-touch Web Development'},
        {url: 'http://www.quirksmode.org/m/tests/drag2.html', ignore: true}
      ]
    }),

    manifest: new Feature({
      id: 'manifest',
      icon: 'mdi-content-archive',
      name: 'Home screen installation',
      description: `Web applications can provide the <code>manifest.json</code> file, standarized as the <b>Web Manifest</b>, specifying the features
       and behaviors needed on order to treat the application as a first-class citizen on the mobile platform, i.e. adding ("installing") to home screen
       with the relevant icon, full screen behaviors, standalone appearance etc.`,
      api: `<pre><code>{
  "short_name": "Example App",
  "name": "The Example Application",
  "icons": [
    {
      "src": "launcher-icon-1x.png",
      "sizes": "48x48"
    },
    {
      "src": "launcher-icon-2x.png",
      "sizes": "96x96"
    }
  ],
  "theme_color": "#ff0000",
  "background_color": "#ff0000",
  "start_url": "index.html",
  "display": "standalone"
}</code></pre>`,
      links: [
        {
          url: 'https://developers.google.com/web/fundamentals/device-access/stickyness/?hl=en',
          title: 'Device Access & Integration: Add To Home Screen'
        },
        {url: 'http://html5doctor.com/web-manifest-specification/', title: 'The Web Manifest specification'}
      ]
    }),

    foregroundDetection: new Feature({
      id: 'foreground-detection',
      icon: 'mdi-action-flip-to-front',
      name: 'Foreground detection',
      description: `<b>Page Visibility API</b> is useful for the web application to know whether it is currently displayed on the front or not, especially to stop
        resource-intensive UI animations or data refreshing when it's not needed. On the mobile devices, the primary reason for that is to reduce battery usage.`,
      api: `<dl>
        <dt><code>document.hidden</code></dt>
        <dd>Returns <code>true</code> if the page is currently hidden.</dd>
        <dt><code>document.visibilityState</code></dt>
        <dd>Returns current visibility state: <code>visible</code>, <code>hidden</code>, <code>prerender</code> or <code>unloaded</code>.</dd>
        <dt><code>document.addEventListener('visibilitychange')</code></dt>
        <dd>Event triggered whenever the visibility state of the page changes.</dd>
      </dl>`,
      caniuse: 'pagevisibility',
      demoPen: 'avBpOb',
      supported: Feature.containedIn(global.document, 'visibilityState')
    }),

    geolocation: new Feature({
      id: 'geolocation',
      icon: 'mdi-device-gps-fixed',
      name: 'Geolocation',
      description: `<b>Geolocation API</b> lets web applications to ask the user for the access to the location data provided by the device -
       obtained using either GPS or from the network environment. Apart from the one-off location query, it gives a way for the app to be notified about location changes.`,
      api: `<dl>
        <dt><code>navigator.geolocation.getCurrentLocation(callback)</code></dt>
        <dd>Runs one-off query for location with coordinates, accuracy, altitude & speed, if available.</dd>
        <dt><code>navigator.geolocation.watchLocation(callback)</code></dt>
        <dd>Sets up observing for location changes, invoking callback for every change.</dd>
      </dl>`,
      caniuse: 'geolocation',
      demoPen: 'ojYoqB',
      supported: Feature.navigatorContains('geolocation'),
      links: [
        {url: 'https://raw.github.com/phiggins42/has.js/master/detect/features.js#native-geolocation', ignore: true},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation', title: 'MDN: Using geolocation'}
      ]
    }),

    bluetooth: new Feature({
      id: 'bluetooth',
      icon: 'mdi-device-bluetooth',
      name: 'Bluetooth',
      description: [`<b>Web Bluetooth API</b> is a low-level API allowing the web applications to access the services exposed by nearby Bluetooth-enabled devices.`,
        `Current support is limited to a partial and experimental (flag-disabled by default) implementation in Google Chrome 45.`],
      api: `<dl>
        <dt><code>navigator.bluetooth.requestDevice(serviceFilters)</code></dt>
        <dd>Scans for the device in range supporting the requested services. Returns a <code>Promise</code>.</dd>
        <dt><code>device.paired</code></dt>
        <dd>Returns the flag whether the device is paired with the system.</dd>
        <dt><code>device.connectGATT()</code></dt>
        <dd>Returns a <code>Promise</code> resolved with the object providing access to the services available on the device.</dd>
        <dt><code>service.getCharacteristic(name)</code></dt>
        <dd>Returns a <code>Promise</code> resolved with the GATT characteristic.</dd>
        <dt><code>characteristic.readValue()</code></dt>
        <dd>Returns a <code>Promise</code> resolved with a raw value from the GATT characteristic.</dd>
        <dt><code>characteristic.writeValue(value)</code></dt>
        <dd>Writes a new value for the GATT characteristic.</dd>
      </dl>`,
      supported: Feature.navigatorContains('bluetooth'),
      demoPen: 'VvPaRY',
      links: [
        {url: 'https://webbluetoothcg.github.io/web-bluetooth/', title: 'Specification draft'},
        {url: 'https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web', title: 'Interact with BLE devices on the Web'}
      ]
    }),

    nfc: new Feature({
      id: 'nfc',
      icon: 'mdi-device-nfc',
      name: 'NFC',
      description: [`<b>Web NFC API</b> is a low-level API allowing the web applications to access the data accessible on the Near-Field Communication devices nearby.`,
        `Current support is limited to Firefox OS applications, where the implementation is experimental, <code>moz</code>-prefixed
         and doesn't follow the current state of the specification draft.`],
      api: `<dl>
        <dt><code>navigator.nfc.requestAdapter()</code></dt>
        <dd>Returns <code>Promise</code> resolved when the user selects the NFC adapter to use.</dd>
        <dt><code>adapter.watch(options, callback)</code></dt>
        <dd>Registers for a notification about the data read from the NFC adapter.</dd>
        <dt><code>adapter.pushMessage(message, options)</code></dt>
        <dd>Triggers sending the message to the NFC adapter.</dd>
      </dl>`,
      supported: Feature.navigatorContains('nfc'),
      demoPen: 'XmpKjQ',
      links: [
        {url: 'https://w3c.github.io/web-nfc/', title: 'Specification draft'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/NFC_API/Using_the_NFC_API', title: 'MDN: Using the NFC API'}
      ]
    }),

    proximity: new Feature({
      id: 'proximity',
      icon: 'mdi-image-leak-add',
      name: 'Proximity sensors',
      description: `<b>Proximity Events API</b> allows the web applications to get access to the data from the device's proximity sensors,
        detecting whether there is a physical object near the device.`,
      api: `<dl>
        <dt><code>window.addEventHandler('deviceproximity', callback)</code></dt>
        <dd>Event triggered when the device senses the physical object proximity, containing approximate distance information.</dd>
        <dt><code>window.addEventHandler('userproximity', callback)</code></dt>
        <dd>Event triggered when the device roughly senses the physical object proximity, containing boolean <code>near</code> flag only.</dd>
      </dl>`,
      caniuse: 'proximity',
      supported: Feature.windowContains('ondeviceproximity') || Feature.windowContains('onuserproximity'),
      links: [
        {url: 'https://w3c.github.io/proximity/', title: 'Specification draft'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Proximity_Events', title: 'MDN: Proximity Events'}
      ]
    }),

    networkInfo: new Feature({
      id: 'network-information',
      icon: 'mdi-device-wifi-tethering',
      name: 'Network information',
      supported: Feature.navigatorContains('connection')
    }),
    online: new Feature({
      id: 'online-state',
      icon: 'mdi-device-signal-cellular-connected-no-internet-3-bar',
      name: 'On-line state',
      caniuse: 'online-status',
      supported: Feature.navigatorContains('onLine')
    }),
    mediaCapture: new Feature({
      id: 'media-capture',
      icon: 'mdi-image-camera-alt',
      name: 'Media capturing',
      caniuse: 'stream',
      supported: Feature.navigatorContains('getUserMedia'),
      links: [
        {url: 'http://www.html5rocks.com/en/tutorials/getusermedia/intro/', title: 'Capturing Audio & Video in HTML5'}
      ]
    }),
    wakeLock: new Feature({
      id: 'wake-lock',
      icon: 'mdi-action-lock',
      name: 'Wake lock',
      supported: Feature.navigatorContains('requestWakeLock')
    }),
    vibration: new Feature({
      id: 'vibration',
      icon: 'mdi-notification-vibration',
      name: 'Vibration',
      caniuse: 'vibration',
      supported: Feature.navigatorContains('vibrate')
    }),
    accelerometer: new Feature({
      id: 'accelerometer',
      icon: 'mdi-action-3d-rotation',
      name: 'Accelerometer',
      caniuse: 'deviceorientation',
      supported: Feature.windowContains('DeviceMotionEvent')
    }),
    batteryStatus: new Feature({
      id: 'battery-status',
      icon: 'mdi-device-battery-80',
      name: 'Battery status',
      caniuse: 'battery-status',
      supported: Feature.navigatorContains('getBattery')
    }),
    ambientLight: new Feature({
      id: 'ambient-light',
      icon: 'mdi-device-brightness-low',
      name: 'Ambient light',
      caniuse: 'ambient-light',
      supported: Feature.windowContains('ondevicelight')
    }),
    permissions: new Feature({
      id: 'permissions',
      icon: 'mdi-action-lock-open',
      name: 'Permissions',
      caniuse: 'permissions-api',
      supported: Feature.navigatorContains('permissions')
    }),
    files: new Feature({
      id: 'files',
      icon: 'mdi-device-sd-storage',
      name: 'File access',
      caniuse: 'fileapi',
      supported: Feature.windowContains('File'),
      links: [
        {url: 'http://www.html5rocks.com/en/tutorials/file/dndfiles/', title: 'Reading files in JavaScript using the File APIs'}
      ]
    }),
    storage: new Feature({
      id: 'storage',
      icon: 'mdi-notification-folder-special',
      name: 'Offline storage',
      caniuse: 'namevalue-storage',
      supported: Feature.windowContains('indexedDB') || Feature.windowContains('localStorage')
    }),
    contacts: new Feature({
      id: 'contacts',
      icon: 'mdi-action-account-box',
      name: 'Contacts',
      supported: Feature.navigatorContains('contacts')
    }),
    quota: new Feature({
      id: 'quota',
      icon: 'mdi-notification-sim-card-alert',
      name: 'Quota management',
      supported: Feature.windowContains('storageInfo') || Feature.navigatorContains('temporaryStorageQuota'),
      links: [
        {url: 'http://www.html5rocks.com/en/tutorials/offline/quota-research/', title: 'Working with quota on mobile browsers'}
      ]
    }),
    deviceOrientation: new Feature({
      id: 'device-orientation',
      icon: 'mdi-device-screen-rotation',
      name: 'Device orientation',
      caniuse: 'deviceorientation',
      supported: Feature.windowContains('DeviceOrientationEvent')
    }),
    rotationLock: new Feature({
      id: 'rotation-lock',
      icon: 'mdi-device-screen-lock-rotation',
      name: 'Rotation lock',
      supported: Feature.containedIn(global.screen, 'lockOrientation')
    }),
    presentation: new Feature({
      id: 'presentation',
      icon: 'mdi-hardware-tv',
      name: 'Presentation features',
      supported: Feature.navigatorContains('presentation')
    }),
    viewports: new Feature({
      id: 'viewports',
      icon: 'mdi-hardware-phonelink',
      name: 'Viewport adaptation',
      links: [
        {url: 'https://dev.opera.com/articles/an-introduction-to-meta-viewport-and-viewport/', title: 'An Introduction to Meta Viewport and @viewport'}
      ]
    }),
    speech: new Feature({
      id: 'speech-recognition',
      icon: 'mdi-av-mic',
      name: 'Speech recognition',
      caniuse: 'speech-recognition',
      supported: Feature.windowContains('SpeechRecognition'),
      links: [
        {url: 'https://shaungallagher.github.io/say_restyle/', title: 'Demo - Edit the webpage with your voice'}
      ]
    }),
    clipboard: new Feature({
      id: 'clipboard',
      icon: 'mdi-content-content-paste',
      name: 'Clipboard (copy & paste)',
      caniuse: 'clipboard',
      supported: Feature.windowContains('ClipboardEvent'),
      links: [
        {url: 'https://github.com/GoogleChrome/samples/tree/gh-pages/cut-and-copy', title: 'Sample code from Google Chrome'}
      ]
    }),
    inputModality: new Feature({
      id: 'input-modality',
      icon: 'mdi-hardware-mouse',
      name: 'Input modality',
      caniuse: 'css-media-interaction',
      links: [
        {url: 'http://radar.oreilly.com/2015/08/proposing-css-input-modailty.html', title: 'Proposing CSS input modality'}
      ]
    }),
    autofill: new Feature({
      id: 'forms-autofill',
      icon: 'mdi-action-assignment-turned-in',
      name: 'Forms autofill',
      links: [
        {url: 'https://html.spec.whatwg.org/multipage/forms.html#autofill', title: 'Specification draft'}
      ]
    })
  };

  let featuresGroups = [
    {
      heading: 'Behave like a native app',
      features: [features.localNotifications, features.pushNotifications, features.backgroundTasks, features.manifest, features.foregroundDetection]
    },
    {
      heading: 'Access what\'s around',
      features: [features.geolocation, features.bluetooth, features.nfc, features.proximity, features.ambientLight]
    },
    {
      heading: 'Access device features',
      features: [features.mediaCapture, features.networkInfo, features.online, features.vibration, features.batteryStatus]
    },
    {
      heading: 'Access the system',
      features: [features.storage, features.files, features.permissions, features.contacts, features.quota]
    },
    {
      heading: 'Input',
      features: [features.touch, features.speech, features.accelerometer, features.clipboard, features.inputModality]
    },
    {
      heading: 'Screen & output',
      features: [features.deviceOrientation, features.rotationLock, features.wakeLock, features.viewports, features.presentation]
    }
  ];

  if (global.WWCD.container) { // web run
    global.WWCD.container.configure(register => register.singletons({
      features: features,
      featuresGroups: featuresGroups
    }));
  } else { // build run
    global.features = features;
  }

})(function () {
  let global = typeof exports === 'object' ? exports : window;
  global.WWCD = global.WWCD || {};
  return global;
}());
