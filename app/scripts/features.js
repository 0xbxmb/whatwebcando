// jshint devel:true

(function (global) {
  'use strict';

  let Feature = global.WWCD.Feature || require('./feature').WWCD.Feature;

  let features = {
    localNotifications: new Feature({
      id: 'local-notifications',
      icon: 'mdi-notification-system-update',
      name: 'Local notifications',
      description: [
        `Notifications, available through the <b>Notifications API</b>, allow authorized web applications to draw users attention
         in a bold but standardized fashion. Notifications are generated by the web application running in a browsers' tab to be presented
         to the user outside of the browser tab area.`,
        `Sadly, due to Android limitations, Chrome - the only browser on Android that implemented the feature - removed support for this API in favor of
         persistent Service Worker-based notifications, leaving the API available but effectively doing nothing.
         See <a href="/push-notifications.html">Push Notifications</a> for more complex, but working alternative.`
      ],
      api: `<dl>
        <dt><code>Notification.requestPermission(callback)</code></dt>
        <dd>Asks a user for the permission to show Notifications, calls <code>callback</code> with the prompt result.</dd>
        <dt><code>Notification.permission</code></dt>
        <dd>Returns current permission state - <code>granted</code> or <code>denied</code>.</dd>
        <dt><code>new Notification(title, [options])</code></dt>
        <dd>Displays local notification outside of the browser tab area.</dd>
      </dl>`,
      caniuse: 'notifications',
      supported: Feature.windowContains('Notification'),
      demoPen: 'yYJdWO',
      links: [
        {url: 'https://addons.mozilla.org/en-us/firefox/addon/221523/', ignore: true},
        {url: 'http://www.html5rocks.com/tutorials/notifications/quick/', ignore: true},
        {url: 'http://aurelio.audero.it/demo/web-notifications-api-demo.html', ignore: true},
        {
          url: 'https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/BygptYClroM',
          title: 'PSA: Android is *only* shipping Service Worker-based Notifications'
        }
      ]
    }),

    pushNotifications: new Feature({
      id: 'push-notifications',
      icon: 'mdi-notification-tap-and-play',
      name: 'Push notifications',
      description: [
        `Remote Push Notifications allow web applications to subscribe the user to the re-engagement mechanism
         that can show a message to the subscriber even if the web application is not currently opened in the browser. This utilizes the powerful concept
         of <b><a href="/background-tasks.html">Service Workers</a></b>, code units installable by the web app that execute separately in the background.`,
        `Currently works in Google Chrome only and requires <a href="https://developers.google.com/cloud-messaging/">GCM</a> setup and HTTPS installation.`
      ],
      api: `<dl>
        <dt><code>serviceWorkerRegistration.pushManager.subscribe()</code></dt>
        <dd>Subscribes a user for the remote Push Notifications. Returns a <code>Promise</code>.</dd>
        <dt><code>serviceWorkerRegistration.pushManager.getSubscription()</code></dt>
        <dd>Returns a <code>Promise</code> indicating current Push Notification subscription state.</dd>
        <dt><code>serviceWorkerRegistration.showNotification(title, [options])</code></dt>
        <dd>Displays notification outside of the browser tab area.</dd>
        <dt><code>serviceWorker.addEventListener('push', listener)</code></dt>
        <dd>An event fired when remote Push Notification has been received, available within Service Worker instance.</dd>
      </dl>`,
      caniuse: 'serviceworkers',
      supported: Feature.navigatorContains('serviceWorker') && Feature.windowContains('PushManager') && Feature.containedIn(ServiceWorkerRegistration.prototype, 'showNotification'),
      links: [
        {url: 'http://www.html5rocks.com/en/tutorials/service-worker/introduction/', ignore: true},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker_API', ignore: true},
        {url: 'https://jakearchibald.github.io/isserviceworkerready/resources.html', ignore: true},
        {
          url: 'https://developers.google.com/web/updates/2015/03/push-notificatons-on-the-open-web',
          title: 'Push Notifications on the Open Web - Chrome tutorial'
        },
        {url: 'https://goroost.com/try-chrome-push-notifications', title: 'Chrome Push Notifications demo'}
      ]
    }),

    backgroundTasks: new Feature({
      id: 'background-tasks',
      icon: 'mdi-action-settings-applications',
      name: 'Background processing',
      description: `Web applications running on HTTPS can request the browser to install the separate code unit called <b>Service Worker</b>.
       This unit is then run in a separate thread off the owning web application, communicating via events and messages.
       It provides a possibility to execute code regardless of the main application state, i.e. when it is not opened.
       Use cases might include prefetching and caching the data, long processing etc.`,
      api: `<dl>
        <dt><code>navigator.serviceWorker.register(path)</code></dt>
        <dd>Installs the Service Worker code available under <code>path</code>. Returns a <code>Promise</code>.</dd>
        <dt><code>navigator.serviceWorker.ready</code></dt>
        <dd>Returns a <code>Promise</code> resolved with <code>serviceWorkerRegistration</code> when the Worker is initialized.</dd>
        <dt><code>serviceWorkerRegistration.update()</code></dt>
        <dd>Checks the server for an updated version of the Service Worker without consulting caches.</dd>
        <dt><code>serviceWorkerRegistration.unregister()</code></dt>
        <dd>Uninstalls the Service Worker.</dd>
      </dl>`,
      caniuse: 'serviceworkers',
      supported: Feature.navigatorContains('serviceWorker'),
      links: [
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker_API', title: 'ServiceWorker API - MDN docs'},
        {
          url: 'https://googlechrome.github.io/samples/service-worker/prefetch/index.html',
          title: 'Service Worker Sample: Pre-fetching Resources During Registration'
        },
        {
          url: 'https://medium.com/@slsoftworks/beyond-offline-bf5c013ec8e7',
          title: 'Beyond Offline: Using a custom service worker to expand on your browserâ€™s capabilities'
        }
      ]
    }),

    manifest: new Feature({
      id: 'manifest',
      icon: 'mdi-content-archive',
      name: 'Home screen installation',
      description: `Web applications can provide the <code>manifest.json</code> file, standarized as the <b>Web Manifest</b>, specifying the features
       and behaviors needed on order to treat the application as a first-class citizen on the mobile platform, i.e. adding ("installing") to home screen
       with the relevant icon, full screen behaviors, standalone appearance etc.`,
      api: `<pre><code>{
  "short_name": "Example App",
  "name": "The Example Application",
  "icons": [
    {
      "src": "launcher-icon-1x.png",
      "sizes": "48x48"
    },
    {
      "src": "launcher-icon-2x.png",
      "sizes": "96x96"
    }
  ],
  "theme_color": "#ff0000",
  "background_color": "#ff0000",
  "start_url": "index.html",
  "display": "standalone"
}</code></pre>`,
      links: [
        {
          url: 'https://developers.google.com/web/fundamentals/device-access/stickyness/?hl=en',
          title: 'Device Access & Integration: Add To Home Screen'
        },
        {url: 'http://html5doctor.com/web-manifest-specification/', title: 'The Web Manifest specification'},
        {url: 'https://medium.com/@berbaquero/installable-web-apps-b48fdbcf5915', title: 'Installable Web Apps'}
      ]
    }),

    foregroundDetection: new Feature({
      id: 'foreground-detection',
      icon: 'mdi-action-flip-to-front',
      name: 'Foreground detection',
      description: `The <b>Page Visibility API</b> is useful for the web application to know whether it is currently displayed on the front or not,
        especially to stop resource-intensive UI animations or data refreshing when it's not needed. On the mobile devices,
        the primary reason for that is to reduce the battery usage.`,
      api: `<dl>
        <dt><code>document.hidden</code></dt>
        <dd>Returns <code>true</code> if the page is currently hidden.</dd>
        <dt><code>document.visibilityState</code></dt>
        <dd>Returns current visibility state: <code>visible</code>, <code>hidden</code>, <code>prerender</code> or <code>unloaded</code>.</dd>
        <dt><code>document.addEventListener('visibilitychange')</code></dt>
        <dd>An event fired when the visibility state of the page has changed.</dd>
      </dl>`,
      caniuse: 'pagevisibility',
      demoPen: 'avBpOb',
      supported: Feature.containedIn(global.document, 'visibilityState')
    }),

    geolocation: new Feature({
      id: 'geolocation',
      icon: 'mdi-device-gps-fixed',
      name: 'Geolocation',
      description: `The <b>Geolocation API</b> lets authorized web applications to access the location data provided by the device -
        obtained using either GPS or from the network environment. Apart from the one-off location query, it gives a way for the app to be notified
        about the location changes.`,
      api: `<dl>
        <dt><code>navigator.geolocation.getCurrentLocation(callback)</code></dt>
        <dd>Runs one-off query for location with coordinates, accuracy, altitude & speed, if available.</dd>
        <dt><code>navigator.geolocation.watchLocation(callback)</code></dt>
        <dd>Sets up observing for location changes, invoking callback for every change.</dd>
      </dl>`,
      caniuse: 'geolocation',
      demoPen: 'ojYoqB',
      supported: Feature.navigatorContains('geolocation'),
      links: [
        {url: 'https://raw.github.com/phiggins42/has.js/master/detect/features.js#native-geolocation', ignore: true},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation', title: 'MDN: Using geolocation'}
      ]
    }),

    bluetooth: new Feature({
      id: 'bluetooth',
      icon: 'mdi-device-bluetooth',
      name: 'Bluetooth',
      description: [
        `The <b>Web Bluetooth API</b> is a low-level API allowing web applications to access the services exposed by nearby Bluetooth-enabled devices.`,
        `Current support is limited to a partial and experimental (flag-disabled by default) implementation in Google Chrome 45.`
      ],
      api: `<dl>
        <dt><code>navigator.bluetooth.requestDevice(serviceFilters)</code></dt>
        <dd>Scans for the device in range supporting the requested services. Returns a <code>Promise</code>.</dd>
        <dt><code>device.paired</code></dt>
        <dd>Returns the flag whether the device is paired with the system.</dd>
        <dt><code>device.connectGATT()</code></dt>
        <dd>Returns a <code>Promise</code> resolved with the object providing access to the services available on the device.</dd>
        <dt><code>service.getCharacteristic(name)</code></dt>
        <dd>Returns a <code>Promise</code> resolved with the GATT characteristic object.</dd>
        <dt><code>characteristic.readValue()</code></dt>
        <dd>Returns a <code>Promise</code> resolved with a raw value from the GATT characteristic.</dd>
        <dt><code>characteristic.writeValue(value)</code></dt>
        <dd>Writes a new value for the GATT characteristic.</dd>
      </dl>`,
      supported: Feature.navigatorContains('bluetooth'),
      demoPen: 'VvPaRY',
      links: [
        {url: 'https://webbluetoothcg.github.io/web-bluetooth/', title: 'Specification draft'},
        {url: 'https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web', title: 'Interact with BLE devices on the Web'}
      ]
    }),

    nfc: new Feature({
      id: 'nfc',
      icon: 'mdi-device-nfc',
      name: 'NFC',
      description: [
        `The <b>Web NFC API</b> is a low-level API allowing web applications to access the data accessible on the Near-Field Communication devices nearby.`,
        `Current support is limited to Firefox OS applications, where the implementation is experimental, <code>moz</code>-prefixed
         and doesn't follow the current state of the specification draft.`
      ],
      api: `<dl>
        <dt><code>navigator.nfc.requestAdapter()</code></dt>
        <dd>Returns <code>Promise</code> resolved when the user selects the NFC adapter to use.</dd>
        <dt><code>adapter.watch(options, callback)</code></dt>
        <dd>Registers for a notification about the data read from the NFC adapter.</dd>
        <dt><code>adapter.pushMessage(message, options)</code></dt>
        <dd>Triggers sending the message to the NFC adapter.</dd>
      </dl>`,
      supported: Feature.navigatorContains('nfc'),
      demoPen: 'XmpKjQ',
      links: [
        {url: 'https://w3c.github.io/web-nfc/', title: 'Specification draft'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/NFC_API/Using_the_NFC_API', title: 'MDN: Using the NFC API'}
      ]
    }),

    proximity: new Feature({
      id: 'proximity',
      icon: 'mdi-image-leak-add',
      name: 'Proximity sensors',
      description: `The <b>Proximity Events API</b> allows web applications to get the access to the data from the device's proximity sensors,
        detecting whether there is a physical object near the device.`,
      api: `<dl>
        <dt><code>window.addEventHandler('deviceproximity', callback)</code></dt>
        <dd>An event fired when the device has sensed the physical object proximity, containing approximate distance information.</dd>
        <dt><code>window.addEventHandler('userproximity', callback)</code></dt>
        <dd>An event fired when the device has roughly sensed the physical object proximity, containing boolean <code>near</code> flag only.</dd>
      </dl>`,
      caniuse: 'proximity',
      supported: Feature.windowContains('ondeviceproximity') || Feature.windowContains('onuserproximity'),
      links: [
        {url: 'https://w3c.github.io/proximity/', title: 'Specification draft'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Proximity_Events', title: 'MDN: Proximity Events'}
      ]
    }),

    ambientLight: new Feature({
      id: 'ambient-light',
      icon: 'mdi-device-brightness-low',
      name: 'Ambient light',
      description: `The <b>Ambient Light API</b> allows web applications to access the light intensity level measured by the device's light sensor.`,
      api: `<dl>
        <dt><code>window.addEventHandler('devicelight', callback)</code></dt>
        <dd>An event fired when the device's light sensor measured value has changed, containing the light intensity expressed in lux.</dd>
      </dl>`,
      caniuse: 'ambient-light',
      supported: Feature.windowContains('ondevicelight'),
      demoPen: 'OyWZqY',
      links: [
        {url: 'http://aurelio.audero.it/demo/ambient-light-api-demo.html', ignore: true},
        {url: 'http://modernweb.com/2014/05/27/introduction-to-the-ambient-light-api/', title: 'Introduction to the Ambient Light API'},
        {url: 'https://w3c.github.io/ambient-light/', title: 'Specification'}
      ]
    }),

    mediaCapture: new Feature({
      id: 'camera-microphone',
      icon: 'mdi-image-camera-alt',
      name: 'Camera & microphone',
      description: `The <b>Media Capture API</b> allows authorized web applications to access the device's audio and video capturing interfaces,
        i.e. to use the camera and the microphone. Streams exposed by the API can be read in the code or bound directly to the HTML
        <code>&lt;audio&gt;</code> or <code>&lt;video&gt;</code> elements.`,
      api: `<dl>
        <dt><code>navigator.getUserMedia(constraints, successCallback, errorCallback)</code></dt>
        <dd>Prompts user for an access to the media interface specified by the <code>constraints</code>
          and calls <code>successCallback</code> with the interface's stream handler on success or <code>errorCallback</code> on failure.</dd>
        <dt><code>stream.getAudioTracks()</code></dt>
        <dd>Returns a collection of audio tracks objects being provided by the device's microphone.</dd>
        <dt><code>stream.getVideoTracks()</code></dt>
        <dd>Returns a collection of video tracks objects being provided by the device's camera.</dd>
        <dt><code>mediaElement.srcObject = stream</code></dt>
        <dd>Sets a stream to be rendered into the provided <code>&lt;audio&gt;</code> or <code>&lt;video&gt;</code> DOM element.</dd>
      </dl>`,
      caniuse: 'stream',
      supported: Feature.navigatorContains('getUserMedia'),
      demoPen: 'YyZKPJ',
      links: [
        {url: 'http://www.w3.org/TR/mediacapture-streams/', title: 'Specification'},
        {url: 'http://www.html5rocks.com/en/tutorials/getusermedia/intro/', title: 'Capturing Audio & Video in HTML5'}
      ]
    }),

    networkInfo: new Feature({
      id: 'network-type-speed',
      icon: 'mdi-device-wifi-tethering',
      name: 'Network type & speed',
      description: `The <b>Network Information API</b> allows web applications to read the current network type and the maximum downlink speed
        and to subscribe for a notification when the network type has changed.`,
      api: `<dl>
        <dt><code>navigator.connection.type</code></dt>
        <dd>Returns the type of the current connection, i.e. <code>cellular</code>, <code>wifi</code>, <code>none</code> etc.</dd>
        <dt><code>navigator.connection.downlinkMax</code></dt>
        <dd>Returns the theoretical maxinum downlink speed, in Mbps, for the underlying technology of the current connection.</dd>
        <dt><code>navigator.connection.addEventListener('change', callback)</code></dt>
        <dd>An event fired when the connection type has changed.</dd>
      </dl>`,
      supported: Feature.navigatorContains('connection'),
      demoPen: 'LpWPvv',
      links: [
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API', title: 'MDN: Network Information API'},
        {url: 'https://w3c.github.io/netinfo/', title: 'Specification'}
      ]
    }),

    online: new Feature({
      id: 'online-state',
      icon: 'mdi-device-signal-cellular-connected-no-internet-3-bar',
      name: 'Online state',
      description: `Browsers expose a network connection availability information to the web application, so that the applications may react properly, i.e.
        stop all the operations utilising the network and switch to cached data when offline condition was detected.`,
      api: `<dl>
        <dt><code>navigator.onLine</code></dt>
        <dd>Returns <code>true</code> when the browser detects network connection available, <code>false</code> otherwise.</dd>
        <dt><code>window.addEventListener('online', callback)</code></dt>
        <dd>An event fired when the browser detects network connection has become available.</dd>
        <dt><code>window.addEventListener('offline', callback)</code></dt>
        <dd>An event fired when the browser detects network connection has become unavailable.</dd>
      </dl>`,
      caniuse: 'online-status',
      supported: Feature.navigatorContains('onLine'),
      demoPen: 'Qjpveg',
      links: [
        {url: 'https://html.spec.whatwg.org/multipage/browsers.html#browser-state', title: 'Specification'}
      ]
    }),

    vibration: new Feature({
      id: 'vibration',
      icon: 'mdi-notification-vibration',
      name: 'Vibration',
      description: `The <b>Vibration API</b> allows web applications to use the device's built-in vibration, if one is present.`,
      api: `<dl>
        <dt><code>navigator.vibrate(durationOrPattern)</code></dt>
        <dd>Vibrate the device once for the duration given or according to durations pattern given.</dd>
      </dl>`,
      caniuse: 'vibration',
      supported: Feature.navigatorContains('vibrate'),
      demoPen: 'VvpxrM',
      links: [
        {url: 'http://dev.w3.org/2009/dap/vibration/', title: 'Specification'}
      ]
    }),

    batteryStatus: new Feature({
      id: 'battery-status',
      icon: 'mdi-device-battery-80',
      name: 'Battery status',
      description: `The <b>Battery Status API</b> allows web applications to get the information about the device's power source, battery charge level,
        expected time of charging or discharging. It also exposes events whenever any of the information available changes. The API allows the applications
        to turn on/off its energy inefficient operations according to the power levels.`,
      api: `<dl>
        <dt><code>navigator.getBattery()</code></dt>
        <dd>Returns a <code>Promise</code> resolved with the object containing battery information.</dd>
        <dt><code>battery.charging</code></dt>
        <dd>Returns <code>true</code> if the device is currently being charged.</dd>
        <dt><code>battery.chargingTime</code></dt>
        <dd>Returns the number of seconds remaining until the battery is fully charged.</dd>
        <dt><code>battery.dischargingTime</code></dt>
        <dd>Returns the number of seconds remaining until the battery is fully discharged.</dd>
        <dt><code>battery.level</code></dt>
        <dd>Returns the battery charging level as the number in 0 to 1 range.</dd>
        <dt><code>battery.addEventListener('chargingchange', callback)</code></dt>
        <dd>An event fired when <code>battery.charging</code> value has changed.</dd>
        <dt><code>battery.addEventListener('chargingtimechange', callback)</code></dt>
        <dd>An event fired when <code>battery.chargingTime</code> value has changed.</dd>
        <dt><code>battery.addEventListener('dischargingtimechange', callback)</code></dt>
        <dd>An event fired when <code>battery.dischargingTime</code> value has changed.</dd>
        <dt><code>battery.addEventListener('levelchange', callback)</code></dt>
        <dd>An event fired when <code>battery.level</code> value has changed.</dd>
      </dl>`,
      caniuse: 'battery-status',
      supported: Feature.navigatorContains('getBattery') || Feature.navigatorContains('battery'),
      demoPen: 'epvKNB',
      links: [
        {url: 'https://dvcs.w3.org/hg/dap/raw-file/default/battery/Overview.html', title: 'Specification draft'}
      ]
    }),

    storage: new Feature({
      id: 'storage',
      icon: 'mdi-notification-folder-special',
      name: 'Offline storage',
      description: [
        `There were <a href="http://diveinto.html5doctor.com/storage.html" target="_blank">several iterations</a> of prototypes
          and standardized technologies for offline storage capabilities for web applications. First attempts were either just hacky workarounds
          (like to store data in cookies) or required additional software (like Flash or Google Gears). Later, Web SQL idea, basically to include SQLite
          natively within a browser, was coined and <a href="http://caniuse.com/#feat=sql-storage" target="_blank">implemented throughout some browsers</a>,
          but deprecated later <a href="https://hacks.mozilla.org/2010/06/beyond-html5-database-apis-and-the-road-to-indexeddb/" target="_blank">due to
          the standardization difficulties</a>.`,
        `Right now there are two distinct and independent technologies standardized and available - simpler <b>Web Storage</b> and more sophisticated
          <b>IndexedDB</b>. Web Storage is a key-value string storage, allowing web applications to store data either persistently and cross-window
           (<code>localStorage</code>) or for a single session in a single browser tab (<code>sessionStorage</code>). IndexedDB is a low-level API
           over database-like structures with transactions and cursors iterating by indexes.`,
        `Live example, API glimpse and usage data shown here are referring to <b>Web Storage</b> engine. For details on IndexedDB,
          refer to <a href="http://caniuse.com/#feat=indexeddb" target="_blank">caniuse.com</a>.`
      ],
      api: `<dl>
        <dt><code>window.sessionStorage</code></dt>
        <dd>Gives an access to the Web Storage engine with per-session objects lifetime.</dd>
        <dt><code>window.localStorage</code></dt>
        <dd>Gives an access to the Web Storage engine with persistent objects lifetime.</dd>
        <dt><code>storage.setItem(key, value)</code></dt>
        <dd>Saves the <code>value</code> string under the <code>key</code> in the selected storage engine.</dd>
        <dt><code>storage.getItem(key)</code></dt>
        <dd>Returns the string value stored under the <code>key</code> in the selected storage engine.</dd>
        <dt><code>storage.removeItem(key)</code></dt>
        <dd>Removes the string value stored under the <code>key</code> from the selected storage engine.</dd>
        <dt><code>storage.clear()</code></dt>
        <dd>Removes all the string values stored in the selected storage engine.</dd>
        <dt><code>window.addEventListener('storage', callback)</code></dt>
        <dd>An event fired when the data stored in either <code>sessionStorage</code> or <code>localStorage</code> has been changed externally.</dd>
      </dl>`,
      caniuse: 'namevalue-storage',
      supported: Feature.windowContains('sessionStorage') || Feature.windowContains('localStorage'),
      demoPen: 'NGpoON',
      links: [
        {url: 'http://code.google.com/p/sessionstorage/', ignore: true}
      ]
    }),

    files: new Feature({
      id: 'files',
      icon: 'mdi-device-sd-storage',
      name: 'File access',
      description: `The <b>File API</b> gives web applications an access to the filesystem-level information about the files that the user decides to share
        with the application, i.e. size, MIME type, modification date, content, without sending the file to the server.`,
      api: `<dl>
        <dt><code>fileInputElement.files</code></dt>
        <dd>Returns a collection of file objects that were selected by the user using <code>&lt;input type="file"&gt;</code>DOM element.</dd>
        <dt><code>file.name</code></dt>
        <dd>Returns the original name of the file, without the path.</dd>
        <dt><code>file.size</code></dt>
        <dd>Returns the file size in bytes.</dd>
        <dt><code>file.type</code></dt>
        <dd>Returns the file's MIME type.</dd>
        <dt><code>file.lastModifiedDate</code></dt>
        <dd>Returns the file's last modification date.</dd>
        <dt><code>fileReader.readAsText(file)</code></dt>
        <dd>Initiates a process of reading the file and encoding its content as text.</dd>
        <dt><code>fileReader.addEventListener('load', callback)</code></dt>
        <dd>An event fired when the reading operation has completed successfully. The data read is available via <code>fileReader.result</code> property.</dd>
      </dl>`,
      caniuse: 'fileapi',
      supported: Feature.windowContains('File'),
      demoPen: 'pjPLRW',
      links: [
        {url: 'http://www.w3.org/TR/FileAPI/', title: 'Specification'},
        {url: 'http://www.html5rocks.com/en/tutorials/file/dndfiles/', title: 'Reading files in JavaScript using the File APIs'}
      ]
    }),

    permissions: new Feature({
      id: 'permissions',
      icon: 'mdi-action-lock-open',
      name: 'Permissions',
      description: `The <b>Permissions API</b> provides the uniform way for web applications to query for the permission status for the features
        that require user consent, like notifications or geolocation. With Permissions API the app can list the permissions
        granted by the user without actually trying to use the feature.`,
      api: `<dl>
        <dt><code>navigator.permissions.query({name: feature})</code></dt>
        <dd>Returns a <code>Promise</code> resolved with the object representing the permission status of the requested feature.</dd>
        <dt><code>permissionStatus.state</code></dt>
        <dd>Returns the permission status of the requested feature, either <code>granted</code>, <code>denied</code> or - in case the user was not yet asked - <code>prompt</code>.</dd>
        <dt><code>permissionStatus.addEventListener('change', callback)</code></dt>
        <dd>An event fired when the permission status of the requested feature has changed.</dd>
      </dl>`,
      caniuse: 'permissions-api',
      supported: Feature.navigatorContains('permissions'),
      demoPen: 'OymKdE',
      links: [
        {url: 'https://w3c.github.io/permissions/', title: 'Specification'}
      ]
    }),

    contacts: new Feature({
      id: 'contacts',
      icon: 'mdi-action-account-box',
      name: 'Contacts',
      description: `The <b>Contacts API</b> gives privileged web applications an access to the user's address book maintained in the system
        and allow reading & modifying the contacts through the vCard-like format.`,
      api: `<dl>
        <dt><code>navigator.contacts.find(filterAndSortOptions)</code></dt>
        <dd>Searches the address book for the contacts according to the specified criteria.</dd>
        <dt><code>navigator.contacts.getAll(sortOptions)</code></dt>
        <dd>Returns a cursor over all the contacts available in the address book.</dd>
        <dt><code>navigator.contacts.save(new Contact())</code></dt>
        <dd>Saves the newly created contact into the address book.</dd>
        <dt><code>navigator.contacts.remove(contact)</code></dt>
        <dd>Removes the contact from the address book.</dd>
      </dl>`,
      supported: Feature.navigatorContains('contacts'),
      links: [
        {url: 'https://www.w3.org/2012/sysapps/contacts-manager-api/', title: 'Specification draft'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Contacts_API', title: 'MDN: Contacts API'}
      ]
    }),

    quota: new Feature({
      id: 'storage-quota',
      icon: 'mdi-notification-sim-card-alert',
      name: 'Storage quotas',
      description: [
        `The <b>Quota Management API</b> allows web applications to query the system for the size of the storage space currently used and
        available for the application and to request for more storage space, if needed. The API maintains a separation between the temporary
        and persistent storage. The temporary storage, to be used by the Application Cache and other non-critical data, might be removed by the browser
        whenever it decides to do so, while persistent storage might not.`,
        `The current support is limited to Google Chrome that implements <code>webkit-</code>prefixed older, incompatible version of the specification draft.`
      ],
      api: `<dl>
        <dt><code>navigator.storageQuota.queryInfo(storageType)</code></dt>
        <dd>Returns a <code>Promise</code> resolved with the storage info for the storage type requested (<code>temporary</code> or <code>persistent</code>).</dd>
        <dt><code>storageInfo.usage</code></dt>
        <dd>Returns the size of the storage currently used by the application, in bytes.</dd>
        <dt><code>storageInfo.quota</code></dt>
        <dd>Returns the total size of the storage available for the application, in bytes, including already used.</dd>
        <dt><code>navigator.storageQuota.requestPersistentQuota(size)</code></dt>
        <dd>Requests for the increase of the quota available up to specified size, in bytes. The browser might not necessarily grant the quota requested
         or it might ask the user for the permission to do so.</dd>
      </dl>`,
      supported: Feature.navigatorContains('storageQuota') || Feature.navigatorContains('persistentStorage'),
      links: [
        {url: 'http://www.w3.org/TR/quota-api/', title: 'Specification draft'},
        {url: 'https://developer.chrome.com/apps/offline_storage', title: 'Details on Chrome implementation'},
        {url: 'http://www.html5rocks.com/en/tutorials/offline/quota-research/', title: 'Quota limitations analysis'}
      ]
    }),

    touch: new Feature({
      id: 'touch',
      icon: 'mdi-content-gesture',
      name: 'Touch gestures',
      description: [`Traditionally, web relies on mouse and keyboard as the only input devices, while mobile devices are mostly controlled by touch.
        Mobile web started with a bit touchy solution of translating touch events to mouse events like <code>mousedown</code>.`,
        `Newer HTML5 approach is to embrace touch as the first-class input mean, allowing web applications to intercept and identify complex multitouch
         gestures, free-hand drawing etc. Unfortunately, the support is twofold - either via touch events like <code>touchstart</code> that were first
         introduced by Apple and standardized later as a de-facto solution, when other vendors went the same route, or via the newer,
         more general <b>Pointer Events</b> specification.`],
      api: `<dl>
        <dt><code>element.addEventListener('touchstart', listener)</code></dt>
        <dd>An event triggered when the finger has been placed on a DOM element.</dd>
        <dt><code>element.addEventListener('touchmove', listener)</code></dt>
        <dd>An event triggered when the finger has been dragged along a DOM element.</dd>
        <dt><code>element.addEventListener('touchend', listener)</code></dt>
        <dd>An event triggered when the finger has been removed from a DOM element.</dd>
      </dl>`,
      caniuse: 'touch',
      demoPen: 'LpbVoV',
      supported: Feature.windowContains('ontouchstart') || Feature.windowContains('onpointerdown'),
      links: [
        {url: 'http://www.w3.org/TR/touch-events/', title: 'Specification'},
        {url: 'http://www.html5rocks.com/en/mobile/touch/', title: 'Multi-touch Web Development'},
        {url: 'http://www.quirksmode.org/m/tests/drag2.html', ignore: true}
      ]
    }),

    accelerometer: new Feature({
      id: 'accelerometer',
      icon: 'mdi-action-3d-rotation',
      name: 'Accelerometer',
      description: `The accelerometer support is a part of <b>Device Orientation API</b>. It allows web applications to access the accelerometer data
        expressed as acceleration (in m/s<sup>2</sup>) and rotation angle change (in &deg;/s) for each of the three dimensions, provided as events.`,
      api: `<dl>
        <dt><code>window.addEventListener('devicemotion', handler)</code></dt>
        <dd>An event fired when the significant changes in the device's acceleration or rotation has occured.</dd>
        <dt><code>event.acceleration</code></dt>
        <dd>A part of the event's payload returning the data about the current device's acceleration excluding gravity for all three axes
         (<code>acceleration.x</code>, <code>acceleration.y</code>, <code>acceleration.z</code>).</dd>
        <dt><code>event.accelerationIncludingGravity</code></dt>
        <dd>A part of the event's payload returning the data about the current device's acceleration including gravity if the device is unable
          to provide the data without the gravity effect using <code>event.acceleration</code>.</dd>
        <dt><code>event.rotationRate</code></dt>
        <dd>A part of the event's payload returning the data about the current device's rotation rates for all three axes
         (<code>rotationRate.alpha</code>, <code>rotationRate.beta</code>, <code>rotationRate.gamma</code>).</dd>
        <dt><code>event.interval</code></dt>
        <dd>A part of the event's payload returning the interval (in ms) at which the data is obtained from the accelerometer.</dd>
      </dl>`,
      caniuse: 'deviceorientation',
      supported: Feature.windowContains('DeviceMotionEvent'),
      demoPen: 'BodzBg',
      links: [
        {url: 'http://www.w3.org/TR/orientation-event/#devicemotion', title: 'Specification'}
      ]
    }),

    speech: new Feature({
      id: 'speech-recognition',
      icon: 'mdi-av-mic',
      name: 'Speech recognition',
      description: `The speech recognition part of the <b>Web Speech API</b> allows authorized web applications to access the device's microphone
        and produces a transcript of the voice being recorded. This allows web applications not only to offer dictation service, but also to use
        voice as one of the input & control method, similar to touch or keyboard.`,
      api: `<dl>
        <dt><code>let recognition = new SpeechRecognition()</code></dt>
        <dd>Creates an object used to configure the recognition process and to receive events about the recognition results.</dd>
        <dt><code>recognition.continuous</code></dt>
        <dd>A boolean property indicating whether the process should stop after the first final transcripts received (when <code>false</code>, the default)
          or send multiple events, until the process is explicitly stopped (when <code>true</code>).</dd>
        <dt><code>recognition.interimResults</code></dt>
        <dd>A boolean property indicating whether interim (not-yet-final) transcripts should be provided, <code>false</code> by default.</dd>
        <dt><code>recognition.lang</code></dt>
        <dd>A property to set up the language for the recognition.</dd>
        <dt><code>recognition.addEventListener('result', callback)</code></dt>
        <dd>An event fired when the process has produced the transcripts for the piece of audio recorded. The callback is called with an array of results,
          each containing a boolean <code>final</code> flag indicating whether the result might be updated in the future event (when <code>false</code>)
          or not and the collection of alternative transcripts, each with <code>transcript</code> itself and a <code>confidence</code> value.</dd>
        <dt><code>recognition.addEventListener('nomatch', callback)</code></dt>
        <dd>An event fired when the process has not produced any transcripts for the piece of audio recorded with the confidence exceeding the minimal
          threshold, i.e. it is not possible to provide the transcription.</dd>
        <dt><code>recognition.start()</code></dt>
        <dd>Starts the recognition process.</dd>
        <dt><code>recognition.stop()</code></dt>
        <dd>Stops the recognition process; useful when <code>recognition.continuous</code> is set to <code>true</code>.</dd>
      </dl>`,
      caniuse: 'speech-recognition',
      supported: Feature.windowContains('SpeechRecognition'),
      links: [
        {url: 'https://dvcs.w3.org/hg/speech-api/raw-file/tip/speechapi.html#speechreco-section', title: 'Specification'},
        {url: 'https://shaungallagher.github.io/say_restyle/', title: 'Demo - Edit the webpage with your voice'}
      ]
    }),

    clipboard: new Feature({
      id: 'clipboard',
      icon: 'mdi-content-content-paste',
      name: 'Clipboard (copy & paste)',
      description: ``,
      api: `<dl>
        <dt><code></code></dt>
        <dd></dd>
      </dl>`,
      caniuse: 'clipboard',
      supported: Feature.windowContains('ClipboardEvent'),
      links: [
        {url: 'https://github.com/GoogleChrome/samples/tree/gh-pages/cut-and-copy', title: 'Sample code from Google Chrome'}
      ]
    }),

    inputModality: new Feature({
      id: 'input-modality',
      icon: 'mdi-hardware-mouse',
      name: 'Input modality',
      description: ``,
      api: `<dl>
        <dt><code></code></dt>
        <dd></dd>
      </dl>`,
      caniuse: 'css-media-interaction',
      links: [
        {url: 'http://radar.oreilly.com/2015/08/proposing-css-input-modailty.html', title: 'Proposing CSS input modality'}
      ]
    }),

    deviceOrientation: new Feature({
      id: 'device-orientation',
      icon: 'mdi-device-screen-rotation',
      name: 'Device orientation',
      description: ``,
      api: `<dl>
        <dt><code></code></dt>
        <dd></dd>
      </dl>`,
      caniuse: 'deviceorientation',
      demoPen: 'EVvyaw',
      supported: Feature.windowContains('DeviceOrientationEvent'),
      links: [
        {url: 'http://www.w3.org/TR/orientation-event/', title: 'Specification'}
      ]
    }),

    rotationLock: new Feature({
      id: 'rotation-lock',
      icon: 'mdi-device-screen-lock-rotation',
      name: 'Rotation lock',
      description: ``,
      api: `<dl>
        <dt><code></code></dt>
        <dd></dd>
      </dl>`,
      supported: Feature.containedIn(global.screen, 'lockOrientation')
    }),

    wakeLock: new Feature({
      id: 'wake-lock',
      icon: 'mdi-action-lock',
      name: 'Wake lock',
      description: ``,
      api: `<dl>
        <dt><code></code></dt>
        <dd></dd>
      </dl>`,
      supported: Feature.navigatorContains('requestWakeLock')
    }),

    viewports: new Feature({
      id: 'viewports',
      icon: 'mdi-hardware-phonelink',
      name: 'Viewport adaptation',
      description: ``,
      api: `<dl>
        <dt><code></code></dt>
        <dd></dd>
      </dl>`,
      links: [
        {url: 'https://dev.opera.com/articles/an-introduction-to-meta-viewport-and-viewport/', title: 'An Introduction to Meta Viewport and @viewport'}
      ]
    }),

    presentation: new Feature({
      id: 'presentation',
      icon: 'mdi-hardware-tv',
      name: 'Presentation features',
      description: ``,
      api: `<dl>
        <dt><code></code></dt>
        <dd></dd>
      </dl>`,
      supported: Feature.navigatorContains('presentation')
    })
  };

  let featuresGroups = [
    {
      heading: 'Behave like a native app',
      features: [features.localNotifications, features.pushNotifications, features.backgroundTasks, features.manifest, features.foregroundDetection]
    },
    {
      heading: 'Input',
      features: [features.touch, features.accelerometer, features.speech, features.clipboard, features.inputModality]
    },
    {
      heading: 'Access what\'s around',
      features: [features.geolocation, features.bluetooth, features.nfc, features.proximity, features.ambientLight]
    },
    {
      heading: 'Access device features',
      features: [features.mediaCapture, features.networkInfo, features.online, features.vibration, features.batteryStatus]
    },
    {
      heading: 'Screen & output',
      features: [features.deviceOrientation, features.rotationLock, features.wakeLock, features.viewports, features.presentation]
    },
    {
      heading: 'Access the system',
      features: [features.storage, features.files, features.permissions, features.contacts, features.quota]
    }
  ];

  if (global.WWCD.container) { // web run
    global.WWCD.container.configure(register => register.singletons({
      features: features,
      featuresGroups: featuresGroups
    }));
  } else { // build run
    global.features = features;
  }

})(function () {
  let global = typeof exports === 'object' ? exports : window;
  global.WWCD = global.WWCD || {};
  return global;
}());
