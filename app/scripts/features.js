(function (global) {
  'use strict';

  let Feature = global.WWCD.Feature || require('./feature').WWCD.Feature;

  let features = {
    localNotifications: new Feature({
      id: 'local-notifications',
      icon: 'mdi-notification-system-update',
      name: 'Local Notifications',
      description: [
        `Notifications, available through the <b>Notifications API</b>, allow authorized web applications to draw users attention
         in a bold but standardized fashion. Notifications are generated by the web application running in a browsers' tab to be presented
         to the user outside of the browser tab area.`,
        `Sadly, due to Android limitations, Chrome - the only browser on Android that implemented the feature - removed support for this API in favor of
         persistent Service Worker-based notifications, leaving the API available but effectively doing nothing.
         See <a href="/push-notifications.html">Push Notifications</a> for more complex, but working alternative.`
      ],
      api: `<dl>
        <dt><code>Notification.requestPermission(callback)</code></dt>
        <dd>Asks a user for the permission to show Notifications, calls <code>callback</code> with the prompt result.</dd>
        <dt><code>Notification.permission</code></dt>
        <dd>Returns current permission state - <code>granted</code> or <code>denied</code>.</dd>
        <dt><code>new Notification(title, [options])</code></dt>
        <dd>Displays local notification outside of the browser tab area.</dd>
      </dl>`,
      caniuse: 'notifications',
      tests: [Feature.windowContains('Notification')],
      demoPen: 'yYJdWO',
      links: [
        {url: 'http://www.w3.org/TR/notifications/', title: 'Specification'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API', title: 'MDN: Notifications API'},
        {url: 'http://www.sitepoint.com/introduction-web-notifications-api/', title: 'SitePoint: An Introduction to the Web Notifications API'},
        {
          url: 'https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/BygptYClroM',
          title: 'PSA: Android is *only* shipping Service Worker-based Notifications'
        },
        {url: 'http://ukot.github.io/ie_web_notifications/', title: 'IE Web Notifications plugin'}
      ]
    }),

    pushNotifications: new Feature({
      id: 'push-notifications',
      icon: 'mdi-notification-tap-and-play',
      name: 'Push Notifications',
      description: [
        `Remote Push Notifications allow web applications to subscribe the user to the re-engagement mechanism
         that can show a message to the subscriber even if the web application is not currently opened in the browser. This utilizes the powerful concept
         of <b><a href="/offline.html">Service Workers</a></b>, code units installable by the web app that execute separately in the separate context.`,
        `Requires HTTPS installation. Currently works in Firefox (turned off by default) and partially in Google Chrome (only pushes without data,
         <a href="https://developers.google.com/cloud-messaging/">GCM</a> setup required).`
      ],
      api: `<dl>
        <dt><code>serviceWorkerRegistration.pushManager.subscribe()</code></dt>
        <dd>Subscribes a user for the remote Push Notifications. Returns a <code>Promise</code>.</dd>
        <dt><code>serviceWorkerRegistration.pushManager.getSubscription()</code></dt>
        <dd>Returns a <code>Promise</code> indicating current Push Notification subscription state.</dd>
        <dt><code>serviceWorkerRegistration.showNotification(title, [options])</code></dt>
        <dd>Displays notification outside of the browser tab area.</dd>
        <dt><code>serviceWorker.addEventListener('push', listener)</code></dt>
        <dd>An event fired when remote Push Notification has been received, available within Service Worker instance.</dd>
      </dl>`,
      caniuse: 'serviceworkers',
      tests: [
        Feature.windowContains('PushManager'),
        Feature.containedIn('ServiceWorkerRegistration',
          global.ServiceWorkerRegistration && global.ServiceWorkerRegistration.prototype, 'showNotification')
      ],
      links: [
        {url: 'https://w3c.github.io/push-api/', title: 'Specification Draft'},
        {
          url: 'https://developers.google.com/web/updates/2015/03/push-notificatons-on-the-open-web',
          title: 'Push Notifications on the Open Web - Chrome tutorial'
        },
        {url: 'https://hacks.mozilla.org/2015/10/keep-pushing-it-with-the-w3c-push-api/', title: 'Keep pushing it, with the W3C Push API'},
        {url: 'https://goroost.com/try-chrome-push-notifications', title: 'Chrome Push Notifications demo'}
      ]
    }),

    offline: new Feature({
      id: 'offline',
      icon: 'mdi-action-settings-applications',
      name: 'Offline Mode',
      description: [`Web applications can provide the offline experience using two techniques. The older implementation,
        <b>Application Cache</b>, is <a href="http://caniuse.com/#feat=offline-apps" target="_blank">widely implemented</a> in the browsers,
        but is now in the process of deprecation due to <a href="http://alistapart.com/article/application-cache-is-a-douchebag" target="_blank">various
        conceptual and design flaws</a>. It is not covered here.`,
        `The modern alternative is called <b>Service Worker</b>. Web applications running on HTTPS can request the browser to install the separate
        code unit called Service Worker. This unit is then run in the separation from the owning web application, communicating with it via events.
        Besides being the enabler for multiple future complex APIs like <a href="/push-notifications.html">Push Notifications</a>, Background Sync
        or Geofencing, it can work as a fully featured network proxy. It can intercept all the HTTP requests, alter its content or behaviors,
        or - most notably - manage offline caching.`,
        `<small>Code examples adapted from <a href="http://www.html5rocks.com/en/tutorials/service-worker/introduction/" target="_blank">HTML5 Rocks article</a>.</small>`],
      api: `<p><b>Within the owning web application - Installation</b></p>
        <dl>
          <dt><code>navigator.serviceWorker.register(path)</code></dt>
          <dd>Installs the Service Worker code available under <code>path</code>. Returns a <code>Promise</code>.</dd>
          <dt><code>navigator.serviceWorker.ready</code></dt>
          <dd>Returns a <code>Promise</code> resolved with <code>serviceWorkerRegistration</code> when the Worker is initialized.</dd>
          <dt><code>serviceWorkerRegistration.update()</code></dt>
          <dd>Checks the server for an updated version of the Service Worker without consulting caches.</dd>
          <dt><code>serviceWorkerRegistration.unregister()</code></dt>
          <dd>Uninstalls the Service Worker.</dd>
        </dl>
        <p><b>Within the Service Worker instance - Cache prefetch</b></p>
        <pre><code>self.addEventListener('install', function (event) {
  event.waitUntil(
    caches.open('my-cache-v1')
      .then(function (cache) {
        return cache.addAll(['/', '/styles/main.css', '/scripts/main.js']);
      })
  );
});</code></pre>
        <dl>
          <dt><code>self.addEventListener('install', listener)</code></dt>
          <dd>An event fired within the Service Worker when it is being installed. Useful to prefetch the resources needed in the offline mode and to prefill the cache.</dd>
          <dt><code>event.waitUntil(promise)</code></dt>
          <dd>An install event method that expects a <code>Promise</code> which signals the end of the worker's installation phase when resolved.</dd>
          <dt><code>caches.open(cacheName)</code></dt>
          <dd>Returns a <code>Promise</code> resolved with the named cache accessor object that is able to keep the resources needed for the offline mode.</dd>
          <dt><code>cache.addAll(urls)</code></dt>
          <dd>Adds all the resources specified with the URLs to the named cache for the future, possibly offline, use.</dd>
        </dl>
        <p><b>Within the Service Worker instance - Requests cache</b></p>
        <pre><code>function isSuccessful(response) {
  return response &&
    response.status === 200 &&
    response.type === 'basic';
}

self.addEventListener('fetch', function (event) {
  event.respondWith(
    caches.match(event.request)
      .then(function (response) {
        if (response) {
          return response; // Cache hit
        }

        return fetch(event.request.clone())
          .then(function (response) {
            if (!isSuccessful(response)) {
              return response;
            }

            caches.open(CACHE_NAME)
              .then(function (cache) {
                cache.put(event.request, response.clone());
              });

            return response;
          }
        );
      })
    );
});</code></pre>
        <dl>
          <dt><code>self.addEventListener('fetch', listener)</code></dt>
          <dd>An event fired within the Service Worker whenever any of its related browser tabs have issued a HTTP request. Useful to serve already cached response
            or intercept and cache the incoming response.</dd>
          <dt><code>event.respondWith(promise)</code></dt>
          <dd>A fetch event method that expects a <code>Promise</code> which resolves with the request data to be returned to the requesting browser tab.</dd>
          <dt><code>cache.put(request, response)</code></dt>
          <dd>Adds the specified response for the request to the named cache for the future, possibly offline, use.</dd>
          <dt><code>caches.match(event.request)</code></dt>
          <dd>Returns a <code>Promise</code> resolved when the <code>fetch</code> event represents a request to the resource already cached within
            the Service Worker's cache.</dd>
      </dl>`,
      caniuse: 'serviceworkers',
      tests: [Feature.navigatorContains('serviceWorker')],
      links: [
        {url: 'http://www.w3.org/TR/service-workers/', title: 'Service Workers Specification Draft'},
        {url: 'http://www.html5rocks.com/en/tutorials/service-worker/introduction/', title: 'HTML5 Rocks: Introduction to Service Worker'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker_API', title: 'ServiceWorker API - MDN docs'},
        {
          url: 'https://googlechrome.github.io/samples/service-worker/prefetch/index.html',
          title: 'Service Worker Sample: Pre-fetching Resources During Registration'
        },
        {
          url: 'https://medium.com/@slsoftworks/beyond-offline-bf5c013ec8e7',
          title: 'Beyond Offline: Using a custom service worker to expand on your browser’s capabilities'
        },
        {url: 'https://ponyfoo.com/articles/serviceworker-revolution', title: 'ServiceWorker: Revolution of the Web Platform'},
        {url: 'https://jakearchibald.github.io/isserviceworkerready/resources.html', title: 'Is ServiceWorker Ready? - Jake Archibald'},
        {url: 'https://css-tricks.com/serviceworker-for-offline/', title: 'Making a Simple Site Work Offline with ServiceWorker'}
      ]
    }),

    manifest: new Feature({
      id: 'manifest',
      icon: 'mdi-content-archive',
      name: 'Home Screen Installation',
      description: `Web applications can provide the <code>manifest.json</code> file, standarized as the <b>Web Manifest</b>, specifying the features
       and behaviors needed on order to treat the application as a first-class citizen on the mobile platform, i.e. adding ("installing") to home screen
       with the relevant icon, full screen behaviors, standalone appearance etc.`,
      api: `<pre><code>{
  "short_name": "Example App",
  "name": "The Example Application",
  "icons": [
    {
      "src": "launcher-icon-1x.png",
      "sizes": "48x48"
    },
    {
      "src": "launcher-icon-2x.png",
      "sizes": "96x96"
    }
  ],
  "theme_color": "#ff0000",
  "background_color": "#ff0000",
  "start_url": "index.html",
  "display": "standalone"
}</code></pre>`,
      links: [
        {url: 'https://w3c.github.io/manifest/', title: 'Specification Draft'},
        {
          url: 'https://developers.google.com/web/fundamentals/device-access/stickyness/?hl=en',
          title: 'Device Access & Integration: Add To Home Screen'
        },
        {url: 'http://html5doctor.com/web-manifest-specification/', title: 'HTML5 Doctor: The Web Manifest specification'},
        {url: 'https://medium.com/@berbaquero/installable-web-apps-b48fdbcf5915', title: 'Installable Web Apps'}
      ]
    }),

    foregroundDetection: new Feature({
      id: 'foreground-detection',
      icon: 'mdi-action-flip-to-front',
      name: 'Foreground Detection',
      description: `The <b>Page Visibility API</b> is useful for the web application to know whether it is currently displayed on the front or not,
        especially to stop resource-intensive UI animations or data refreshing when it's not needed. On the mobile devices,
        the primary reason for that is to reduce the battery usage.`,
      api: `<dl>
        <dt><code>document.hidden</code></dt>
        <dd>Returns <code>true</code> if the page is currently hidden.</dd>
        <dt><code>document.visibilityState</code></dt>
        <dd>Returns current visibility state: <code>visible</code>, <code>hidden</code>, <code>prerender</code> or <code>unloaded</code>.</dd>
        <dt><code>document.addEventListener('visibilitychange')</code></dt>
        <dd>An event fired when the visibility state of the page has changed.</dd>
      </dl>`,
      caniuse: 'pagevisibility',
      demoPen: 'avBpOb',
      tests: [Feature.containedIn('document', global.document, 'visibilityState')],
      links: [
        {url: 'https://w3c.github.io/page-visibility/', title: 'Specification Draft'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API', title: 'MDN: Page Visibility API'},
        {url: 'http://www.sitepoint.com/introduction-to-page-visibility-api/', title: 'SitePoint: Introduction to Page Visibility API'}
      ]
    }),

    geolocation: new Feature({
      id: 'geolocation',
      icon: 'mdi-device-gps-fixed',
      name: 'Geolocation',
      description: `The <b>Geolocation API</b> lets authorized web applications to access the location data provided by the device -
        obtained using either GPS or from the network environment. Apart from the one-off location query, it gives a way for the app to be notified
        about the location changes.`,
      api: `<dl>
        <dt><code>navigator.geolocation.getCurrentLocation(callback)</code></dt>
        <dd>Runs one-off query for location with coordinates, accuracy, altitude & speed, if available.</dd>
        <dt><code>navigator.geolocation.watchLocation(callback)</code></dt>
        <dd>Sets up observing for location changes, invoking callback for every change.</dd>
      </dl>`,
      caniuse: 'geolocation',
      demoPen: 'ojYoqB',
      tests: [Feature.navigatorContains('geolocation')],
      links: [
        {url: 'http://www.w3.org/TR/geolocation-API/', title: 'Specification'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation', title: 'MDN: Using geolocation'}
      ]
    }),

    bluetooth: new Feature({
      id: 'bluetooth',
      icon: 'mdi-device-bluetooth',
      name: 'Bluetooth',
      description: [
        `The <b>Web Bluetooth API</b> is a low-level API allowing web applications to access the services exposed by nearby Bluetooth-enabled devices.`,
        `Current support is limited to a partial and experimental (flag-disabled by default) implementation in Google Chrome 45.`
      ],
      api: `<dl>
        <dt><code>navigator.bluetooth.requestDevice(serviceFilters)</code></dt>
        <dd>Scans for the device in range supporting the requested services. Returns a <code>Promise</code>.</dd>
        <dt><code>device.connectGATT()</code></dt>
        <dd>Returns a <code>Promise</code> resolved with the object providing access to the services available on the device.</dd>
        <dt><code>service.getCharacteristic(name)</code></dt>
        <dd>Returns a <code>Promise</code> resolved with the GATT characteristic object.</dd>
        <dt><code>characteristic.readValue()</code></dt>
        <dd>Returns a <code>Promise</code> resolved with a raw value from the GATT characteristic.</dd>
        <dt><code>characteristic.writeValue(value)</code></dt>
        <dd>Writes a new value for the GATT characteristic.</dd>
      </dl>`,
      tests: [Feature.navigatorContains('bluetooth')],
      demoPen: 'VvPaRY',
      links: [
        {url: 'https://webbluetoothcg.github.io/web-bluetooth/', title: 'Specification Draft'},
        {url: 'https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web', title: 'Interact with BLE devices on the Web'}
      ]
    }),

    nfc: new Feature({
      id: 'nfc',
      icon: 'mdi-device-nfc',
      name: 'NFC',
      description: [
        `The <b>Web NFC API</b> is a low-level API allowing web applications to access the data accessible on the Near-Field Communication devices nearby.`,
        `Current support is limited to Firefox OS applications, where the implementation is experimental, <code>moz</code>-prefixed
         and doesn't follow the current state of the specification draft.`
      ],
      api: `<dl>
        <dt><code>navigator.nfc.requestAdapter()</code></dt>
        <dd>Returns <code>Promise</code> resolved when the user selects the NFC adapter to use.</dd>
        <dt><code>adapter.watch(options, callback)</code></dt>
        <dd>Registers for a notification about the data read from the NFC adapter.</dd>
        <dt><code>adapter.pushMessage(message, options)</code></dt>
        <dd>Triggers sending the message to the NFC adapter.</dd>
      </dl>`,
      tests: [Feature.navigatorContains('nfc')],
      demoPen: 'XmpKjQ',
      links: [
        {url: 'https://w3c.github.io/web-nfc/', title: 'Specification Draft'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/NFC_API/Using_the_NFC_API', title: 'MDN: Using the NFC API'}
      ]
    }),

    proximity: new Feature({
      id: 'proximity',
      icon: 'mdi-image-leak-add',
      name: 'Proximity Sensors',
      description: `The <b>Proximity Events API</b> allows web applications to get the access to the data from the device's proximity sensors,
        detecting whether there is a physical object near the device.`,
      api: `<dl>
        <dt><code>window.addEventListener('deviceproximity', listener)</code></dt>
        <dd>An event fired when the device has sensed the physical object proximity, containing approximate distance information.</dd>
        <dt><code>window.addEventListener('userproximity', listener)</code></dt>
        <dd>An event fired when the device has roughly sensed the physical object proximity, containing boolean <code>near</code> flag only.</dd>
      </dl>`,
      caniuse: 'proximity',
      tests: [
        Feature.windowContains('ondeviceproximity'),
        Feature.windowContains('onuserproximity')
      ],
      links: [
        {url: 'https://w3c.github.io/proximity/', title: 'Specification Draft'},
        {url: 'http://www.sitepoint.com/introducing-proximity-api/', title: 'SitePoint: Introducing the Proximity API'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Proximity_Events', title: 'MDN: Proximity Events'}
      ]
    }),

    ambientLight: new Feature({
      id: 'ambient-light',
      icon: 'mdi-device-brightness-low',
      name: 'Ambient Light',
      description: `The <b>Ambient Light API</b> allows web applications to access the light intensity level measured by the device's light sensor.`,
      api: `<dl>
        <dt><code>window.addEventListener('devicelight', listener)</code></dt>
        <dd>An event fired when the device's light sensor measured value has changed, containing the light intensity expressed in lux.</dd>
      </dl>`,
      caniuse: 'ambient-light',
      tests: [Feature.windowContains('ondevicelight')],
      demoPen: 'OyWZqY',
      links: [
        {url: 'https://w3c.github.io/ambient-light/', title: 'Specification Draft'},
        {url: 'http://modernweb.com/2014/05/27/introduction-to-the-ambient-light-api/', title: 'Introduction to the Ambient Light API'}
      ]
    }),

    mediaCapture: new Feature({
      id: 'camera-microphone',
      icon: 'mdi-image-camera-alt',
      name: 'Camera & Microphone',
      description: `The <b>Media Capture API</b> allows authorized web applications to access the device's audio and video capturing interfaces,
        i.e. to use the camera and the microphone. Streams exposed by the API can be read in the code or bound directly to the HTML
        <code>&lt;audio&gt;</code> or <code>&lt;video&gt;</code> elements.`,
      api: `<dl>
        <dt><code>navigator.mediaDevices.getUserMedia(constraints)</code></dt>
        <dd>Prompts user for an access to the media interface specified by the <code>constraints</code>
          and returns a <code>Promise</code> that is resolved with the interface's stream handler.</dd>
        <dt><code>stream.getAudioTracks()</code></dt>
        <dd>Returns a collection of audio tracks objects being provided by the device's microphone.</dd>
        <dt><code>stream.getVideoTracks()</code></dt>
        <dd>Returns a collection of video tracks objects being provided by the device's camera.</dd>
        <dt><code>mediaElement.srcObject = stream</code></dt>
        <dd>Sets a stream to be rendered into the provided <code>&lt;audio&gt;</code> or <code>&lt;video&gt;</code> DOM element.</dd>
      </dl>
      <p>Previous version of the standard, supported with vendor prefixes, contained the callback-based <code>getUserMedia</code> method directly within the <code>navigator</code> element:</p>
      <pre><code>navigator.webkitGetUserMedia(constraints, successCallback, errorCallback)</code></pre>`,
      caniuse: 'stream',
      tests: [
        Feature.navigatorContains('getUserMedia'),
        Feature.navigatorContains('mediaDevices')
      ],
      demoPen: 'YyZKPJ',
      links: [
        {url: 'https://w3c.github.io/mediacapture-main/', title: 'Specification Draft'},
        {url: 'http://www.html5rocks.com/en/tutorials/getusermedia/intro/', title: 'HTML5 Rocks: Capturing Audio & Video in HTML5'},
        {
          url: 'http://blogs.windows.com/msedgedev/2015/05/13/announcing-media-capture-functionality-in-microsoft-edge/',
          title: 'Announcing media capture functionality in Microsoft Edge'
        },
        {
          url: 'https://dev.opera.com/blog/webcam-orientation-preview/',
          title: 'Native Webcam Support and Orientation Events — Technology Preview from Opera'
        },
        {url: 'http://www.sitepoint.com/face-proximity-detection-with-javascript/', title: 'SitePoint: Face Proximity Detection with JavaScript'}
      ]
    }),

    networkInfo: new Feature({
      id: 'network-type-speed',
      icon: 'mdi-device-wifi-tethering',
      name: 'Network Type & Speed',
      description: `The <b>Network Information API</b> allows web applications to read the current network type and the maximum downlink speed
        and to subscribe for a notification when the network type has changed.`,
      api: `<dl>
        <dt><code>navigator.connection.type</code></dt>
        <dd>Returns the type of the current connection, i.e. <code>cellular</code>, <code>wifi</code>, <code>none</code> etc.</dd>
        <dt><code>navigator.connection.downlinkMax</code></dt>
        <dd>Returns the theoretical maxinum downlink speed, in Mbps, for the underlying technology of the current connection.</dd>
        <dt><code>navigator.connection.addEventListener('change', listener)</code></dt>
        <dd>An event fired when the connection type has changed.</dd>
      </dl>`,
      tests: [Feature.navigatorContains('connection')],
      demoPen: 'LpWPvv',
      links: [
        {url: 'https://w3c.github.io/netinfo/', title: 'Specification Draft'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API', title: 'MDN: Network Information API'}
      ]
    }),

    online: new Feature({
      id: 'online-state',
      icon: 'mdi-device-signal-cellular-connected-no-internet-3-bar',
      name: 'Online State',
      description: `Browsers expose a network connection availability information to the web application, so that the applications may react properly, i.e.
        stop all the operations utilising the network and switch to cached data when offline condition was detected.`,
      api: `<dl>
        <dt><code>navigator.onLine</code></dt>
        <dd>Returns <code>true</code> when the browser detects network connection available, <code>false</code> otherwise.</dd>
        <dt><code>window.addEventListener('online', listener)</code></dt>
        <dd>An event fired when the browser detects network connection has become available.</dd>
        <dt><code>window.addEventListener('offline', listener)</code></dt>
        <dd>An event fired when the browser detects network connection has become unavailable.</dd>
      </dl>`,
      caniuse: 'online-status',
      tests: [Feature.navigatorContains('onLine')],
      demoPen: 'Qjpveg',
      links: [
        {url: 'https://html.spec.whatwg.org/multipage/browsers.html#browser-state', title: 'Specification'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine#Specification', title: 'MDN description'}
      ]
    }),

    vibration: new Feature({
      id: 'vibration',
      icon: 'mdi-notification-vibration',
      name: 'Vibration',
      description: `The <b>Vibration API</b> allows web applications to use the device's built-in vibration, if one is present.`,
      api: `<dl>
        <dt><code>navigator.vibrate(durationOrPattern)</code></dt>
        <dd>Vibrate the device once for the duration given or according to durations pattern given.</dd>
      </dl>`,
      caniuse: 'vibration',
      tests: [Feature.navigatorContains('vibrate')],
      demoPen: 'VvpxrM',
      links: [
        {url: 'http://dev.w3.org/2009/dap/vibration/', title: 'Specification Draft'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Vibration_API', title: 'MDN: Vibration API'},
        {
          url: 'http://illyism.com/journal/vibrate-mobile-phone-web-vibration-api',
          title: 'Learn how to vibrate your mobile phone on the web using the vibration API'
        }
      ]
    }),

    batteryStatus: new Feature({
      id: 'battery-status',
      icon: 'mdi-device-battery-80',
      name: 'Battery Status',
      description: `The <b>Battery Status API</b> allows web applications to get the information about the device's power source, battery charge level,
        expected time of charging or discharging. It also exposes events whenever any of the information available changes. The API allows the applications
        to turn on/off its energy inefficient operations according to the power levels.`,
      api: `<dl>
        <dt><code>navigator.getBattery()</code></dt>
        <dd>Returns a <code>Promise</code> resolved with the object containing battery information.</dd>
        <dt><code>battery.charging</code></dt>
        <dd>Returns <code>true</code> if the device is currently being charged.</dd>
        <dt><code>battery.chargingTime</code></dt>
        <dd>Returns the number of seconds remaining until the battery is fully charged.</dd>
        <dt><code>battery.dischargingTime</code></dt>
        <dd>Returns the number of seconds remaining until the battery is fully discharged.</dd>
        <dt><code>battery.level</code></dt>
        <dd>Returns the battery charging level as the number in 0 to 1 range.</dd>
        <dt><code>battery.addEventListener('chargingchange', listener)</code></dt>
        <dd>An event fired when <code>battery.charging</code> value has changed.</dd>
        <dt><code>battery.addEventListener('chargingtimechange', listener)</code></dt>
        <dd>An event fired when <code>battery.chargingTime</code> value has changed.</dd>
        <dt><code>battery.addEventListener('dischargingtimechange', listener)</code></dt>
        <dd>An event fired when <code>battery.dischargingTime</code> value has changed.</dd>
        <dt><code>battery.addEventListener('levelchange', listener)</code></dt>
        <dd>An event fired when <code>battery.level</code> value has changed.</dd>
      </dl>`,
      caniuse: 'battery-status',
      tests: [
        Feature.navigatorContains('getBattery'),
        Feature.navigatorContains('battery')
      ],
      demoPen: 'epvKNB',
      links: [
        {url: 'https://dvcs.w3.org/hg/dap/raw-file/default/battery/Overview.html', title: 'Specification Draft'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Battery_Status_API', title: 'MDN: Battery Status API'}
      ]
    }),

    storage: new Feature({
      id: 'storage',
      icon: 'mdi-notification-folder-special',
      name: 'Offline Storage',
      description: [
        `There were <a href="http://diveinto.html5doctor.com/storage.html" target="_blank">several iterations</a> of prototypes
          and standardized technologies for offline storage capabilities for web applications. First attempts were either just hacky workarounds
          (like to store data in cookies) or required additional software (like Flash or Google Gears). Later, Web SQL idea, basically to include SQLite
          natively within a browser, was coined and <a href="http://caniuse.com/#feat=sql-storage" target="_blank">implemented throughout some browsers</a>,
          but deprecated later <a href="https://hacks.mozilla.org/2010/06/beyond-html5-database-apis-and-the-road-to-indexeddb/" target="_blank">due to
          the standardization difficulties</a>.`,
        `Right now there are two distinct and independent technologies standardized and available - simpler <b>Web Storage</b> and more sophisticated
          <b>IndexedDB</b>. Web Storage is a key-value string storage, allowing web applications to store data either persistently and cross-window
           (<code>localStorage</code>) or for a single session in a single browser tab (<code>sessionStorage</code>). IndexedDB is a low-level API
           over database-like structures with transactions and cursors iterating by indexes.`,
        `Live example, API glimpse and usage data shown here are referring to <b>Web Storage</b> engine. For details on IndexedDB,
          refer to <a href="http://caniuse.com/#feat=indexeddb" target="_blank">caniuse.com</a>.`
      ],
      api: `<dl>
        <dt><code>window.sessionStorage</code></dt>
        <dd>Gives an access to the Web Storage engine with per-session objects lifetime.</dd>
        <dt><code>window.localStorage</code></dt>
        <dd>Gives an access to the Web Storage engine with persistent objects lifetime.</dd>
        <dt><code>storage.setItem(key, value)</code></dt>
        <dd>Saves the <code>value</code> string under the <code>key</code> in the selected storage engine.</dd>
        <dt><code>storage.getItem(key)</code></dt>
        <dd>Returns the string value stored under the <code>key</code> in the selected storage engine.</dd>
        <dt><code>storage.removeItem(key)</code></dt>
        <dd>Removes the string value stored under the <code>key</code> from the selected storage engine.</dd>
        <dt><code>storage.clear()</code></dt>
        <dd>Removes all the string values stored in the selected storage engine.</dd>
        <dt><code>window.addEventListener('storage', listener)</code></dt>
        <dd>An event fired when the data stored in either <code>sessionStorage</code> or <code>localStorage</code> has been changed externally.</dd>
      </dl>`,
      caniuse: 'namevalue-storage',
      tests: [
        Feature.windowContains('sessionStorage'),
        Feature.windowContains('localStorage')
      ],
      demoPen: 'NGpoON',
      links: [
        {url: 'https://html.spec.whatwg.org/multipage/webstorage.html', title: 'Specification'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API', title: 'MDN: Web Storage API'},
        {url: 'http://docs.webplatform.org/wiki/tutorials/offline_storage', title: 'Overview of client-side storage'}
      ]
    }),

    files: new Feature({
      id: 'files',
      icon: 'mdi-device-sd-storage',
      name: 'File Access',
      description: `The <b>File API</b> gives web applications an access to the filesystem-level information about the files that the user decides to share
        with the application, i.e. size, MIME type, modification date, content, without sending the file to the server.`,
      api: `<dl>
        <dt><code>fileInputElement.files</code></dt>
        <dd>Returns a collection of file objects that were selected by the user using <code>&lt;input type="file"&gt;</code>DOM element.</dd>
        <dt><code>file.name</code></dt>
        <dd>Returns the original name of the file, without the path.</dd>
        <dt><code>file.size</code></dt>
        <dd>Returns the file size in bytes.</dd>
        <dt><code>file.type</code></dt>
        <dd>Returns the file's MIME type.</dd>
        <dt><code>file.lastModifiedDate</code></dt>
        <dd>Returns the file's last modification date.</dd>
        <dt><code>fileReader.readAsText(file)</code></dt>
        <dd>Initiates a process of reading the file and encoding its content as text.</dd>
        <dt><code>fileReader.addEventListener('load', listener)</code></dt>
        <dd>An event fired when the reading operation has completed successfully. The data read is available via <code>fileReader.result</code> property.</dd>
      </dl>`,
      caniuse: 'fileapi',
      tests: [Feature.windowContains('File')],
      demoPen: 'pjPLRW',
      links: [
        {url: 'https://w3c.github.io/FileAPI/', title: 'Specification Draft'},
        {
          url: 'https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications',
          title: 'MDN: Using files from web applications'
        },
        {url: 'http://www.html5rocks.com/en/tutorials/file/dndfiles/', title: 'Reading files in JavaScript using the File APIs'}
      ]
    }),

    permissions: new Feature({
      id: 'permissions',
      icon: 'mdi-action-lock-open',
      name: 'Permissions',
      description: `The <b>Permissions API</b> provides the uniform way for web applications to query for the permission status for the features
        that require user consent, like notifications or geolocation. With Permissions API the app can list the permissions
        granted by the user without actually trying to use the feature.`,
      api: `<dl>
        <dt><code>navigator.permissions.query({name: feature})</code></dt>
        <dd>Returns a <code>Promise</code> resolved with the object representing the permission status of the requested feature.</dd>
        <dt><code>permissionStatus.state</code></dt>
        <dd>Returns the permission status of the requested feature, either <code>granted</code>, <code>denied</code> or - in case the user was not yet asked - <code>prompt</code>.</dd>
        <dt><code>permissionStatus.addEventListener('change', listener)</code></dt>
        <dd>An event fired when the permission status of the requested feature has changed.</dd>
      </dl>`,
      caniuse: 'permissions-api',
      tests: [Feature.navigatorContains('permissions')],
      demoPen: 'OymKdE',
      links: [
        {url: 'https://w3c.github.io/permissions/', title: 'Specification Draft'},
        {url: 'https://developers.google.com/web/updates/2015/04/permissions-api-for-the-web', title: 'Permissions API for the Web'}
      ]
    }),

    contacts: new Feature({
      id: 'contacts',
      icon: 'mdi-action-account-box',
      name: 'Contacts',
      description: `The <b>Contacts API</b> gives privileged web applications an access to the user's address book maintained in the system
        and allow reading & modifying the contacts through the vCard-like format.`,
      api: `<dl>
        <dt><code>navigator.contacts.find(filterAndSortOptions)</code></dt>
        <dd>Searches the address book for the contacts according to the specified criteria.</dd>
        <dt><code>navigator.contacts.getAll(sortOptions)</code></dt>
        <dd>Returns a cursor over all the contacts available in the address book.</dd>
        <dt><code>navigator.contacts.save(new Contact())</code></dt>
        <dd>Saves the newly created contact into the address book.</dd>
        <dt><code>navigator.contacts.remove(contact)</code></dt>
        <dd>Removes the contact from the address book.</dd>
      </dl>`,
      tests: [Feature.navigatorContains('contacts')],
      links: [
        {url: 'https://www.w3.org/2012/sysapps/contacts-manager-api/', title: 'Specification Draft'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Contacts_API', title: 'MDN: Contacts API'}
      ]
    }),

    quota: new Feature({
      id: 'storage-quota',
      icon: 'mdi-notification-sim-card-alert',
      name: 'Storage Quotas',
      description: [
        `The <b>Quota Management API</b> allows web applications to query the system for the size of the storage space currently used and
        available for the application and to request for more storage space, if needed. The API maintains a separation between the temporary
        and persistent storage. The temporary storage, to be used by the Application Cache and other non-critical data, might be removed by the browser
        whenever it decides to do so, while persistent storage might not.`,
        `The current support is limited to Google Chrome that implements <code>webkit-</code>prefixed older, incompatible version of the specification draft.`
      ],
      api: `<dl>
        <dt><code>navigator.storageQuota.queryInfo(storageType)</code></dt>
        <dd>Returns a <code>Promise</code> resolved with the storage info for the storage type requested
          (<code>temporary</code> or <code>persistent</code>).</dd>
        <dt><code>storageInfo.usage</code></dt>
        <dd>Returns the size of the storage currently used by the application, in bytes.</dd>
        <dt><code>storageInfo.quota</code></dt>
        <dd>Returns the total size of the storage available for the application, in bytes, including already used.</dd>
        <dt><code>navigator.storageQuota.requestPersistentQuota(size)</code></dt>
        <dd>Requests for the increase of the quota available up to specified size, in bytes. The browser might not necessarily grant the quota requested
         or it might ask the user for the permission to do so.</dd>
      </dl>`,
      tests: [
        Feature.navigatorContains('storageQuota'),
        Feature.navigatorContains('persistentStorage')
      ],
      links: [
        {url: 'https://w3c.github.io/quota-api/', title: 'Specification Draft'},
        {url: 'https://developer.chrome.com/apps/offline_storage', title: 'Details on Chrome implementation'},
        {url: 'http://www.html5rocks.com/en/tutorials/offline/quota-research/', title: 'Quota limitations analysis'}
      ]
    }),

    touch: new Feature({
      id: 'touch',
      icon: 'mdi-content-gesture',
      name: 'Touch Gestures',
      description: [`Traditionally, web relies on a mouse and a keyboard as the only input devices, while mobile devices are mostly controlled by touch.
        Mobile web started with a bit touchy solution of translating touch events to mouse events like <code>mousedown</code>.`,
        `Newer HTML5 approach is to embrace touch as the first-class input mean, allowing web applications to intercept and identify complex multitouch
         gestures, free-hand drawing etc. Unfortunately, the support is twofold - either via touch events like <code>touchstart</code> that were first
         introduced by Apple and standardized later as a de-facto solution, when other vendors went the same route, or via the newer,
         more general <b>Pointer Events</b> specification, initiated by Microsoft.`],
      api: `<p><b>Touch Events API</b></p>
        <dl>
          <dt><code>element.addEventListener('touchstart', listener)</code></dt>
          <dd>An event triggered when the finger has been placed on a DOM element.</dd>
          <dt><code>element.addEventListener('touchmove', listener)</code></dt>
          <dd>An event triggered when the finger has been dragged along a DOM element.</dd>
          <dt><code>element.addEventListener('touchend', listener)</code></dt>
          <dd>An event triggered when the finger has been removed from a DOM element.</dd>
        </dl>
        <p><b>Pointer Events API</b></p>
        <dl>
          <dt><code>element.addEventListener('pointerdown', listener)</code></dt>
          <dd>An event triggered when the finger has been placed on a DOM element.</dd>
          <dt><code>element.addEventListener('pointermove', listener)</code></dt>
          <dd>An event triggered when the finger has been dragged along a DOM element.</dd>
          <dt><code>element.addEventListener('pointerup', listener)</code></dt>
          <dd>An event triggered when the finger has been removed from a DOM element.</dd>
        </dl>`,
      //caniuse: ['touch', 'pointer'], //TODO multiple caniuse refs
      caniuse: 'touch',
      demoPen: 'LpbVoV',
      tests: [
        Feature.windowContains('ontouchstart'),
        Feature.windowContains('onpointerdown')
      ],
      links: [
        {url: 'https://w3c.github.io/touch-events/', title: 'Touch Events API Specification'},
        {url: 'https://w3c.github.io/pointerevents/', title: 'Pointer Events API Specification Draft'},
        {url: 'http://www.quirksmode.org/mobile/tableTouch.html', title: 'Detailed support table'},
        {url: 'http://www.html5rocks.com/en/mobile/touch/', title: 'Multi-touch Web Development'}
      ]
    }),

    accelerometer: new Feature({
      id: 'accelerometer',
      icon: 'mdi-action-3d-rotation',
      name: 'Accelerometer',
      description: [`The accelerometer support is a part of <b>Device Orientation API</b>. It allows web applications to access the accelerometer data
        expressed as acceleration (in m/s<sup>2</sup>) and rotation angle change (in &deg;/s) for each of the three dimensions, provided as events.`,
        `For the detenction of the device's static position and orientation, see <a href="/device-orientation.html">Device Orientation</a>.`],
      api: `<dl>
        <dt><code>window.addEventListener('devicemotion', listener)</code></dt>
        <dd>An event fired when the significant changes in the device's acceleration or rotation has occured.</dd>
        <dt><code>event.acceleration</code></dt>
        <dd>A part of the event's payload returning the data about the current device's acceleration excluding gravity for all three axes
         (<code>acceleration.x</code>, <code>acceleration.y</code>, <code>acceleration.z</code>).</dd>
        <dt><code>event.accelerationIncludingGravity</code></dt>
        <dd>A part of the event's payload returning the data about the current device's acceleration including gravity if the device is unable
          to provide the data without the gravity effect using <code>event.acceleration</code>.</dd>
        <dt><code>event.rotationRate</code></dt>
        <dd>A part of the event's payload returning the data about the current device's rotation rates for all three axes
         (<code>rotationRate.alpha</code>, <code>rotationRate.beta</code>, <code>rotationRate.gamma</code>).</dd>
        <dt><code>event.interval</code></dt>
        <dd>A part of the event's payload returning the interval (in ms) at which the data is obtained from the accelerometer.</dd>
      </dl>`,
      caniuse: 'deviceorientation',
      tests: [Feature.windowContains('DeviceMotionEvent')],
      demoPen: 'BodzBg',
      links: [
        {url: 'https://w3c.github.io/deviceorientation/spec-source-orientation.html#devicemotion', title: 'Specification Draft'},
        {url: 'http://www.html5rocks.com/en/tutorials/device/orientation/', title: 'HTML5 Rocks: This End Up: Using Device Orientation'}
      ]
    }),

    speech: new Feature({
      id: 'speech-recognition',
      icon: 'mdi-av-mic',
      name: 'Speech Recognition',
      description: `The speech recognition part of the <b>Web Speech API</b> allows authorized web applications to access the device's microphone
        and produces a transcript of the voice being recorded. This allows web applications not only to offer dictation service, but also to use
        voice as one of the input & control method, similar to touch or keyboard.`,
      api: `<dl>
        <dt><code>let recognition = new SpeechRecognition()</code></dt>
        <dd>Creates an object used to configure the recognition process and to receive events about the recognition results.</dd>
        <dt><code>recognition.continuous</code></dt>
        <dd>A boolean property indicating whether the process should stop after the first final transcripts received (when <code>false</code>, the default)
          or send multiple events, until the process is explicitly stopped (when <code>true</code>).</dd>
        <dt><code>recognition.interimResults</code></dt>
        <dd>A boolean property indicating whether interim (not-yet-final) transcripts should be provided, <code>false</code> by default.</dd>
        <dt><code>recognition.lang</code></dt>
        <dd>A property to set up the language for the recognition.</dd>
        <dt><code>recognition.addEventListener('result', listener)</code></dt>
        <dd>An event fired when the process has produced the transcripts for the piece of audio recorded. The listener is called with an array of results,
          each containing a boolean <code>final</code> flag indicating whether the result might be updated in the future event (when <code>false</code>)
          or not and the collection of alternative transcripts, each with <code>transcript</code> itself and a <code>confidence</code> value.</dd>
        <dt><code>recognition.addEventListener('nomatch', listener)</code></dt>
        <dd>An event fired when the process has not produced any transcripts for the piece of audio recorded with the confidence exceeding the minimal
          threshold, i.e. it is not possible to provide the transcription.</dd>
        <dt><code>recognition.start()</code></dt>
        <dd>Starts the recognition process.</dd>
        <dt><code>recognition.stop()</code></dt>
        <dd>Stops the recognition process; useful when <code>recognition.continuous</code> is set to <code>true</code>.</dd>
      </dl>`,
      caniuse: 'speech-recognition',
      tests: [Feature.windowContains('SpeechRecognition')],
      links: [
        {url: 'https://dvcs.w3.org/hg/speech-api/raw-file/tip/speechapi.html#speechreco-section', title: 'Specification'},
        {url: 'http://www.sitepoint.com/introducing-web-speech-api/', title: 'SitePoint: Introducing the Web Speech API'},
        {
          url: 'https://developers.google.com/web/updates/2013/01/Voice-Driven-Web-Apps-Introduction-to-the-Web-Speech-API',
          title: 'Voice Driven Web Apps: Introduction to the Web Speech API'
        },
        {url: 'https://shaungallagher.github.io/say_restyle/', title: 'Demo - Edit the webpage with your voice'}
      ]
    }),

    clipboard: new Feature({
      id: 'clipboard',
      icon: 'mdi-content-content-paste',
      name: 'Clipboard (Copy & Paste)',
      description: `The <b>Clipboard API</b> gives web applications a way to react on cut, copy and paste operations performed by the user as well as
        read from or write to the system clipboard directly on behalf of user.`,
      api: `<dl>
        <dt><code>document.addEventListener('cut/copy/paste', listener)</code></dt>
        <dd>An event fired when the user invoked the particular clipboard operation (either cut, copy or paste).</dd>
        <dt><code>event.clipboardData.setData('text/plain', data)</code></dt>
        <dd>Sets the data that is to be written to the clipboard by the cut or copy operations in the specified format.</dd>
        <dt><code>event.clipboardData.getData('text/plain')</code></dt>
        <dd>Returns the data that has been read from the clipboard by the paste operation in the specified format.</dd>
        <dt><code>document.execCommand('cut/copy/paste')</code></dt>
        <dd>Programatically invokes the specified clipboard operation (either cut, copy or paste) on the data or element currently having a focus.</dd>
      </dl>`,
      caniuse: 'clipboard',
      tests: [
        Feature.windowContains('ClipboardEvent'), 
        Feature.containedIn('document', global.document, 'oncut'),
        Feature.containedIn('document', global.document, 'oncopy'),
        Feature.containedIn('document', global.document, 'onpaste')
      ],
      demoPen: 'bVozGY',
      links: [
        {url: 'https://w3c.github.io/clipboard-apis/', title: 'Specification Draft'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent', title: 'MDN: ClipboardEvent'},
        {
          url: 'https://www.lucidchart.com/techblog/2014/12/02/definitive-guide-copying-pasting-javascript/',
          title: 'The Definitive Guide to Copying and Pasting in JavaScript'
        }
      ]
    }),

    pointerAdaptation: new Feature({
      id: 'pointer-adaptation',
      icon: 'mdi-hardware-mouse',
      name: 'Pointing Device Adaptation',
      description: [`The <b>Interaction Media</b> part of CSS4 specification defines the media queries allowing web applications to alter its layout
        and user interface depending on the way the user is supposed to interact with the application. It allows to identify the browser's primary
        pointer (i.e. mouse, touch, keyboard) and decides whether it is fine or coarse and whether hovering over the element is possible using
        the "classic" interface (like touch on tablet), so that the interface might be shrunk or enlarged and hover interactions enabled
        or replaced with an alternative accordingly.`,
        `Additionally, the specification defines the similiar media queries for cases when all the pointing methods (not only the primary one)
        should be considered - i.e. to answer the question is hovering possible at all, using any method available.`],
      api: `<dl class="language-css">
        <dt><code>@media (pointer: fine)</code></dt>
        <dd>The media query that limits the enclosed CSS rules to be used only when the primary pointing device allows accurate pointing.</dd>
        <dt><code>@media (pointer: coarse)</code></dt>
        <dd>The media query that limits the enclosed CSS rules to be used only when the primary pointing device does not allow accurate pointing.</dd>
        <dt><code>@media (pointer: none)</code></dt>
        <dd>The media query that limits the enclosed CSS rules to be used only when the primary interacting device is not capable of pointing
          (i.e. keyboard).</dd>
        <dt><code>@media (hover)</code></dt>
        <dd>The media query that limits the enclosed CSS rules to be used only when the primary pointing device allows hovering over elements.</dd>
        <dt><code>@media (any-pointer: fine)</code></dt>
        <dd>The media query that limits the enclosed CSS rules to be used only when any of the pointing devices available allows accurate pointing.</dd>
        <dt><code>@media (any-pointer: coarse)</code></dt>
        <dd>The media query that limits the enclosed CSS rules to be used only when any of the pointing devices does not allow accurate pointing.</dd>
        <dt><code>@media (any-hover)</code></dt>
        <dd>The media query that limits the enclosed CSS rules to be used only when any of the pointing devices allows hovering over elements.</dd>
      </dl>`,
      caniuse: 'css-media-interaction',
      demoPen: 'pjdyoK',
      links: [
        {url: 'http://www.w3.org/TR/mediaqueries-4/#mf-interaction', title: 'Specification Draft'},
        {
          url: 'http://jordanm.co.uk/2013/11/11/potential-use-cases-for-script-hover-and-pointer.html',
          title: 'Potential use cases for script, hover and pointer CSS Level 4 Media Features'
        },
        {
          url: 'https://dev.opera.com/articles/media-features/',
          title: 'Dev.Opera: Interaction Media Features and their potential (for incorrect assumptions)'
        },
        {url: 'https://github.com/twbs/mq4-hover-shim', title: 'A shim for the Media Queries Level 4 `hover` media feature'},
        {url: 'http://radar.oreilly.com/2015/08/proposing-css-input-modailty.html', title: 'Proposing CSS input modality'}
      ]
    }),

    deviceOrientation: new Feature({
      id: 'device-orientation',
      icon: 'mdi-device-screen-rotation',
      name: 'Device Orientation',
      description: [`The <b>Device Orientation API</b> allows web applications to access the gyroscope and compass data in order to determine the orientation
        of the user's device in all the three dimensions, expressed in degrees of divergence from the "natural" northbound lie flat position.`,
        `For the detection of the device's movements, see <a href="/accelerometer.html">Accelerometer</a>.`],
      api: `<dl>
        <dt><code>window.addEventListener('deviceorientation', listener)</code></dt>
        <dd>An event fired when the significant changes in the device's orientation has occured.</dd>
        <dt><code>event.alpha</code></dt>
        <dd>Returns device's current heading (direction) in degrees, counted counterclockwise from the North (0) through West (90), South (180) and East (270).</dd>
        <dt><code>event.beta</code></dt>
        <dd>Returns device's current front/back tilt in degrees, 0 when lying horizontally upward facing, 90 when in vertical position,
          -90 in vertical upside down, -180 when horizontal upside down.</dd>
        <dt><code>event.gamma</code></dt>
        <dd>Returns device's current left/right tilt in degrees, from -90 when turned left to 90 when turned right.</dd>
      </dl>`,
      caniuse: 'deviceorientation',
      demoPen: 'EVvyaw',
      tests: [Feature.windowContains('DeviceOrientationEvent')],
      links: [
        {url: 'https://w3c.github.io/deviceorientation/spec-source-orientation.html', title: 'Specification Draft'},
        {url: 'http://www.html5rocks.com/en/tutorials/device/orientation/', title: 'HTML5 Rocks: This End Up: Using Device Orientation'}
      ]
    }),

    fullScreen: new Feature({
      id: 'fullscreen',
      icon: 'mdi-action-settings-overscan',
      name: 'Fullscreen',
      description: `The <b>Fullscreen API</b> allows web applications to present itself or the part of itself in the fullscreen mode,
        without browser UI elements visible. It also serves as the prerequisite state for the <a href="/orientation-lock.html">orientation lock</a>.`,
      api: `<dl>
        <dt><code>document.fullscreenEnabled</code></dt>
        <dd>Returns a boolean indicating whether the fullscreen mode is available and allowed.</dd>
        <dt><code>element.requestFullscreen()</code></dt>
        <dd>Requests a fullscreen mode display for a given <code>element</code>. Returns a <code>Promise</code> resolved when the request was successful.</dd>
        <dt><code>document.fullscreenElement</code></dt>
        <dd>Returns a reference to the element currently being displayed in the fullscreen mode.</dd>
        <dt><code>document.exitFullscreen()</code></dt>
        <dd>Exits the fullscreen mode.</dd>
        <dt><code>document.addEventListener('fullscreenchange', listener)</code></dt>
        <dd>An event fired when the fullscreen mode has been entered or exited.</dd>
      </dl>`,
      caniuse: 'fullscreen',
      demoPen: 'LpewpQ',
      tests: [
        Feature.containedIn('document.documentElement', global.document && document.documentElement, 'requestFullScreen'),
        Feature.containedIn('document.documentElement', global.document && document.documentElement, 'requestFullscreen')
      ],
      links: [
        {url: 'https://fullscreen.spec.whatwg.org/', title: 'Specification'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API', title: 'MDN: Fullscreen API'},
        {
          url: 'https://hacks.mozilla.org/2012/01/using-the-fullscreen-api-in-web-browsers/',
          title: 'Mozilla Hacks: Using the Fullscreen API in web browsers'
        }
      ]
    }),

    orientationLock: new Feature({
      id: 'orientation-lock',
      icon: 'mdi-device-screen-lock-rotation',
      name: 'Screen Orientation & Lock',
      description: `The <b>Screen Orientation API</b> allows web applications to get the information about the current orientation of the document
        (portrait or landscape) as well as to lock the screen orientation in a requested state.`,
      api: `<dl>
        <dt><code>window.screen.orientation.type</code></dt>
        <dd>Returns the current screen orientation type as one of <code>portrait-primary</code>, <code>portrait-secondary</code> (upside down),
          <code>landscape-primary</code> and <code>landscape-secondary</code> (upside down).</dd>
        <dt><code>window.screen.orientation.addEventListener('change', listener)</code></dt>
        <dd>An event fired when the document orientation has changed.</dd>
        <dt><code>window.screen.orientation.lock(lockType)</code></dt>
        <dd>Requests a screen lock in the <code>lockType</code> specified. Returns a <code>Promise</code> resolved when the lock was acquired successfully.</dd>
        <dt><code>window.screen.orientation.unlock()</code></dt>
        <dd>Removes previously acquired screen orientation lock.</dd>
      </dl>`,
      caniuse: 'screen-orientation',
      demoPen: 'EVbpeX',
      tests: [
        Feature.containedIn('screen', global.screen, 'orientation'),
        Feature.containedIn('screen', global.screen, 'lockOrientation')
      ],
      links: [
        {url: 'https://w3c.github.io/screen-orientation/', title: 'Specification Draft'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation', title: 'MDN: Screen.orientation'},
        {url: 'http://www.sitepoint.com/introducing-screen-orientation-api/', title: 'SitePoint: Introducing the Screen Orientation API'}
      ]
    }),

    wakeLock: new Feature({
      id: 'wake-lock',
      icon: 'mdi-action-lock',
      name: 'Wake Lock',
      description: [`The <b>Wake Lock API</b> allows web applications to prevent the resource such as the screen, WiFi connection or CPU from becoming
        available as long as the application holds a lock for that resource. The purpose of the API is to let the user or the application to complete
        the activity uninterrupted.`,
        `At the moment there are two distinct technologies named Wake Lock API. One is a non-standard implementation available only on Firefox OS,
        while the second is a W3C proposal at the stage of initial drafts, with no vendor support yet.`],
      api: `<dl>
        <dt><code>lock = navigator.requestWakeLock('screen')</code></dt>
        <dd>Acquires a wake lock on the resource specified, such as <code>screen</code>, <code>wifi</code> or <code>cpu</code> (Firefox OS implementation).</dd>
        <dt><code>lock.unlock()</code></dt>
        <dd>Releases the existing lock (Firefox OS implementation),</dd>
        <dt><code>screen.keepAwake = true</code></dt>
        <dd>The property allowing to acquire a screen wake lock when set to <code>true</code> and release it when set to <code>false</code> (W3C proposal).</dd>
      </dl>`,
      tests: [Feature.navigatorContains('requestWakeLock')],
      links: [
        {url: 'https://w3c.github.io/wake-lock/', title: 'W3C Specification Draft'},
        {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Wake_Lock_API', title: 'MDN Documentation: Wake Lock API on Firefox OS'}
      ]
    }),

    presentation: new Feature({
      id: 'presentation',
      icon: 'mdi-hardware-tv',
      name: 'Presentation Features',
      description: [`The <b>Presentation API</b> aims at allowing web applications to use the presentation display mode. The display used to present
        may be the same that the browser is using, but may also be the external display device. The browser might serve as the initiator
        of the presentation as well as receive the connections to the presentations initiated externally on the presentation display.`,
        `The API is in the early draft phase, not yet supported in any browser.`],
      api: `<dl>
        <dt><code>navigator.presentation.defaultRequest = new PresentationRequest(presentationUrl)</code></dt>
        <dd>Sets up an object representing the browser's request for initiating the specified presentation on a presentation display.</dd>
        <dt><code>request.getAvailability()</code></dt>
        <dd>Returns a <code>Promise</code> resolved with the object providing availability of a presentation display.</dd>
        <dt><code>availability.value</code></dt>
        <dd>Returns a boolean indicating whether a presentation display is available.</dd>
        <dt><code>availability.addEventListener('change', listener)</code></dt>
        <dd>An event fired when the availability status of a presentation display has changed.</dd>
        <dt><code>request.start()</code></dt>
        <dd>Returns a <code>Promise</code> resolved with the connection to the newly initiated presentation on the presentation display.</dd>
        <dt><code>connection.state</code></dt>
        <dd>Returns a string indicating the state of the presentation on the presentation display, i.e. <code>connected</code>, <code>closed</code>, <code>terminated</code>.</dd>
        <dt><code>connection.addEventListener('statechange', listener)</code></dt>
        <dd>An event fired when the state of the presentation on the presentation display has changed.</dd>
        <dt><code>connection.send(message)</code></dt>
        <dd>Sends a message to the presentation running on the presentation display.</dd>
        <dt><code>connection.addEventListener('message', listener)</code></dt>
        <dd>An event fired when a message from the presentation running on the presentation display has been received.</dd>
        <dt><code>connection.close()</code></dt>
        <dd>Closes the connection to the presentation running on the presentation display, letting it continue uninterrupted.</dd>
        <dt><code>connection.terminate()</code></dt>
        <dd>Terminates the presentation running on the presentation display.</dd>
        <dt><code>navigator.presentation.receiver.getConnections()</code></dt>
        <dd>Returns a <code>Promise</code> resolved with the array of connections to the presentations running on a presentation display.</dd>
        <dt><code>navigator.presentation.receiver.addEventListener('connectionavailable', listener)</code></dt>
        <dd>An event fired when the new connection to the presentations running on a presentation display has become available.</dd>
      </dl>`,
      tests: [
        Feature.navigatorContains('presentation'),
        Feature.windowContains('PresentationRequest')
      ],
      links: [
        {url: 'https://w3c.github.io/presentation-api/', title: 'Specification Draft'}
      ]
    })
  };

  if (global.WWCD.container) { // web run
    global.WWCD.container.configure(register => register.singletons({
      features: features
    }));
  } else { // build run
    global.features = features;
    global.groups = require('../../build/groups.json')
  }

})(function () {
  let global = typeof exports === 'object' ? exports : window;
  global.WWCD = global.WWCD || {};
  return global;
}());
