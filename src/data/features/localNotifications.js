import {Feature} from "../../utils/feature.js";

export default new Feature({
  id: 'local-notifications',
  name: 'Local Notifications',
  description: [
    `Notifications, available through the <b>Notifications API</b>, allow authorized Web applications to draw users attention
         in a bold but standardized fashion. Notifications are generated by the Web application running in a browsers' tab to be presented
         to the user outside of the browser tab area.`,
    `Specification-wise, there are two distinct kinds of notifications in the Web - persistent and non-persistent. Persistent notifications
         are deliverable and possible to interact with also when the Web application that generated it is no longer active (i.e. the tab was closed)
         while non-persistent notifications require the tab to be active. Implementation-wise, persistent notifications require active Service Worker
         registration (but it should not be confused with <a href="/push-notifications.html">Push Messages</a> that also go through the Service
         Worker, but are triggered from the outside of the application).`
  ],
  api: `<dl>
        <dt><code>Notification.requestPermission([callback])</code></dt>
        <dd>Asks a user for the permission to show Notifications. Returns a <code>Promise</code> with the prompt result. As a legacy, it also calls <code>callback</code> function, if provided.</dd>
        <dt><code>Notification.permission</code></dt>
        <dd>Returns current permission state - <code>default</code> (user not yet decided), <code>granted</code> or <code>denied</code>.</dd>
        <dt><code>new Notification(title, [options])</code></dt>
        <dd>Displays local <b>non-persistent</b> notification outside of the browser tab area.</dd>
        <dt><code>navigator.serviceWorker.getRegistration()</code><br>
        <code>&nbsp;&nbsp;.then(reg => reg.showNotification(title, [options])</code></dt>
        <dd>Displays local <b>persistent</b> notification outside of the browser tab area.</dd>
      </dl>`,
  caniuse: 'notifications',
  tests: [
    Feature.rawTest('window', `Notification`, () => {
      try {
        if (!('Notification' in window)) {
          return false;
        }
        if ('silent' in Notification.prototype) {
          new Notification('test', {silent: true, vibrate: 100});
        }
        return true;
      } catch (e) {
        return e.message.indexOf('Silent') !== -1;
      }
    }),
    Feature.serviceWorkerRegistrationContains('showNotification')
  ],
  demo: {
    html: `<p>Current permission status is <b id="status">unavailable</b>.</p>

<p><button onclick="requestPermission()">Request permission</button></p>
<p><button onclick="nonPersistentNotification()">Non-persistent notification</button></p>
<p><button onclick="persistentNotification()">Persistent notification</button></p>`,
    js: `var $status = document.getElementById('status');

if ('Notification' in window) {
  $status.innerText = Notification.permission;
}

function requestPermission() {
  if (!('Notification' in window)) {
    alert('Notification API not supported!');
    return;
  }
  
  Notification.requestPermission(function (result) {
    $status.innerText = result;
  });
}

function nonPersistentNotification() {
  if (!('Notification' in window)) {
    alert('Notification API not supported!');
    return;
  }
  
  try {
    var notification = new Notification("Hi there - non-persistent!");
  } catch (err) {
    alert('Notification API error: ' + err);
  }
}

function persistentNotification() {
  if (!('Notification' in window) || !('ServiceWorkerRegistration' in window)) {
    alert('Persistent Notification API not supported!');
    return;
  }
  
  try {
    navigator.serviceWorker.getRegistration()
      .then(reg => reg.showNotification("Hi there - persistent!"))
      .catch(err => alert('Service Worker registration error: ' + err));
  } catch (err) {
    alert('Notification API error: ' + err);
  }
}`
  },
  links: [
    {url: 'https://notifications.spec.whatwg.org/', title: 'Specification'},
    {url: 'https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API', title: 'MDN: Notifications API'},
    {
      url: 'http://www.sitepoint.com/introduction-web-notifications-api/',
      title: 'SitePoint: An Introduction to the Web Notifications API'
    },
    {
      url: 'https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/BygptYClroM',
      title: 'PSA: Android is *only* shipping Service Worker-based Notifications'
    },
    {url: 'http://ukot.github.io/ie_web_notifications/', title: 'IE Web Notifications plugin'}
  ]
})
