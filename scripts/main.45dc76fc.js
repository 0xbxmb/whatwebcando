"use strict";function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _toConsumableArray(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}return Array.from(a)}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function a(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}();!function(a){var b=function(a,b){for(var c in b)b.hasOwnProperty(c)&&a(c,b[c])},c=function(){function a(b){_classCallCheck(this,a),this.$injector=b}return _createClass(a,[{key:"$define",value:function(a,b){Object.defineProperty(this.$injector,a,{readonly:!0,enumerable:!0,get:b})}},{key:"singleton",value:function(a,b){return this.$define(a,function(){return b}),this}},{key:"singletons",value:function(a){return b(this.singleton.bind(this),a),this}},{key:"class",value:function(a,b){var c=this;return this.$define(a,function(){return new b(c.$injector)}),this}},{key:"classes",value:function(a){return b(this["class"].bind(this),a),this}}]),a}(),d=function(){function a(){var b=arguments.length<=0||void 0===arguments[0]?void 0:arguments[0];_classCallCheck(this,a),this.$injector=Object.create(null),b&&this.configure(b)}return _createClass(a,[{key:"configure",value:function(a){a(new c(this.$injector))}},{key:"resolveAndCall",value:function(a){for(var b=arguments.length,c=Array(b>1?b-1:0),d=1;b>d;d++)c[d-1]=arguments[d];return a.apply(void 0,c.concat([this.injector]))}},{key:"injector",get:function(){return this.$injector}}]),a}();a.container=new d}(window.WWCD=window.WWCD||{});var _createClass=function(){function a(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}();!function(a){var b=function(){function a(b,c){var d=arguments.length<=2||void 0===arguments[2]?!0:arguments[2],e=arguments.length<=3||void 0===arguments[3]?"":arguments[3];_classCallCheck(this,a),this.passed=b,this.property=c,this.standard=d,this.prefix=e}return _createClass(a,[{key:"message",get:function(){return this.standard?this.passed?this.prefix?"Prefixed":"Supported":"Not supported":this.passed?"Supported with non-standard solution":"Non-standard solution not supported"}}],[{key:"forPassed",value:function(b,c,d){return new a(!0,b,c,d)}},{key:"forFailed",value:function(b,c){return new a(!1,b,c)}}]),a}(),c=function(){function a(b,c,d){var e=arguments.length<=3||void 0===arguments[3]?!0:arguments[3];_classCallCheck(this,a),this.containerName=b,this.property=c,this.test=d,this.standard=e}return _createClass(a,[{key:"result",get:function(){return(this.test()?b.forPassed:b.forFailed)(this.property,this.standard)}}]),a}(),d=function(){function a(b,c,d){var e=arguments.length<=3||void 0===arguments[3]?!0:arguments[3];_classCallCheck(this,a),this.containerName=b,this.property=d,this.standard=e,Object.defineProperties(this,{$container:{value:c,enumerable:!1}})}return _createClass(a,[{key:"$capitalizeFirst",value:function(a){return a.substr(0,1).toUpperCase()+a.substr(1)}},{key:"result",get:function(){var a=this.$container,c=this.property;if(!a)return b.forFailed(c,this.standard);if(c in a)return b.forPassed(c,this.standard);for(var d=this.$capitalizeFirst(c),e=["moz","webkit","ms"],f=0;f<e.length;f++){var g=e[f];if(g+c in a)return b.forPassed(c,this.standard,g);if(g+d in a)return b.forPassed(d,this.standard,g);var h=this.$capitalizeFirst(g);if(h+d in a)return b.forPassed(d,this.standard,h)}return b.forFailed(c,this.standard)}}]),a}(),e=function(){function a(b){var c=b.id,d=b.name,e=b.description,f=void 0===e?[]:e,g=b.api,h=void 0===g?void 0:g,i=b.tests,j=void 0===i?[]:i,k=b.demoPen,l=void 0===k?void 0:k,m=b.links,n=void 0===m?[]:m,o=b.caniuse,p=void 0===o?void 0:o;_classCallCheck(this,a),this.id=c,this.name=d,this.description="string"==typeof f?[f]:f,this.api=h,this.caniuseKey=p,this.tests=j,this.demoPen=l,this.links=n}return _createClass(a,[{key:"supported",get:function(){return this.tests.length?!!this.tests.find(function(a){return a.result.passed}):void 0}},{key:"notSupported",get:function(){return this.supported===!1}}]),a}();e.containedIn=function(a,b,c,e){return new d(a,b,c,e)},e.navigatorContains=function(b,c){return e.containedIn("navigator",a.navigator,b,c)},e.windowContains=function(b,c){return e.containedIn("window",a,b,c)},e.rawTest=function(a,b,d){return new c(a,b,d)},a.WWCD.Feature=e}(function(){var a="object"==typeof exports?exports:window;return a.WWCD=a.WWCD||{},a}());var _slicedToArray=function(){function a(a,b){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!b||c.length!==b);d=!0);}catch(i){e=!0,f=i}finally{try{!d&&h["return"]&&h["return"]()}finally{if(e)throw f}}return c}return function(b,c){if(Array.isArray(b))return b;if(Symbol.iterator in Object(b))return a(b,c);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_createClass=function(){function a(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}();!function(a){function b(a){return a.ok?Promise.resolve(a):Promise.reject(new Error(a.statusText))}var c="Others",d=5,e={ie:"Internet Explorer",ios_saf:"Safari (iOS)",op_mini:"Opera Mini",and_chr:"Chrome (Android)",and_uc:"UC Browser (Android)"},f=function(a){return a.substr(0,1).toUpperCase()+a.substr(1)},g=function(a){return a.reduce(function(a,b){return(a||0)+(b||0)})},h=function(){function a(b,c,d){_classCallCheck(this,a),this.$browserUsage=d,this.feature=b;var e=this.$compileBrowserReports(c);this.browsers=[].concat(_toConsumableArray(this.$rollupRarelyUsedBrowsers(e))).reverse()}return _createClass(a,[{key:"$compileBrowserReports",value:regeneratorRuntime.mark(function b(a){var c,d,e,f,g,h,i;return regeneratorRuntime.wrap(function(b){for(;;)switch(b.prev=b.next){case 0:c=(a||{}).stats,d=!0,e=!1,f=void 0,b.prev=4,g=Object.keys(c)[Symbol.iterator]();case 6:if(d=(h=g.next()).done){b.next=13;break}return i=h.value,b.next=10,this.$getBrowserReport(i,c[i],this.$browserUsage.usageOf(i));case 10:d=!0,b.next=6;break;case 13:b.next=19;break;case 15:b.prev=15,b.t0=b["catch"](4),e=!0,f=b.t0;case 19:b.prev=19,b.prev=20,!d&&g["return"]&&g["return"]();case 22:if(b.prev=22,!e){b.next=25;break}throw f;case 25:return b.finish(22);case 26:return b.finish(19);case 27:case"end":return b.stop()}},b,this,[[4,15,19,27],[20,,22,26]])})},{key:"$rollupRarelyUsedBrowsers",value:regeneratorRuntime.mark(function d(a){var b,e,f,g,h,i,j;return regeneratorRuntime.wrap(function(d){for(;;)switch(d.prev=d.next){case 0:b={browserName:c,noSupport:{share:0},partialSupport:{share:0},hasSupport:{share:0}},e=!0,f=!1,g=void 0,d.prev=4,h=a[Symbol.iterator]();case 6:if(e=(i=h.next()).done){d.next=19;break}if(j=i.value,!this.$browserUsage.isAboveThreshold(j.browserKey)){d.next=13;break}return d.next=11,j;case 11:d.next=16;break;case 13:b.noSupport.share+=j.noSupport.share||0,b.partialSupport.share+=j.partialSupport.share||0,b.hasSupport.share+=j.hasSupport.share||0;case 16:e=!0,d.next=6;break;case 19:d.next=25;break;case 21:d.prev=21,d.t0=d["catch"](4),f=!0,g=d.t0;case 25:d.prev=25,d.prev=26,!e&&h["return"]&&h["return"]();case 28:if(d.prev=28,!f){d.next=31;break}throw g;case 31:return d.finish(28);case 32:return d.finish(25);case 33:return d.next=35,b;case 35:case"end":return d.stop()}},d,this,[[4,21,25,33],[26,,28,32]])})},{key:"$getBrowserReport",value:function(b,c,d){var g={},h=1===Object.keys(c).length,i=!0,j=!1,k=void 0;try{for(var l,m=Object.keys(c)[Symbol.iterator]();!(i=(l=m.next()).done);i=!0){var n=l.value,o=a.$normalizeSupportFlag(c[n]);g[o]=g[o]||{min:n,max:n,share:0},g[o].share+=d[n]||h&&d[0]||0,1===compareVersions(g[o].min,n)?g[o].min=n:-1===compareVersions(g[o].max,n)&&(g[o].max=n)}}catch(p){j=!0,k=p}finally{try{!i&&m["return"]&&m["return"]()}finally{if(j)throw k}}return{browserKey:b,browserName:e[b]||f(b),noSupport:g.n||{},partialSupport:g.p||{},hasSupport:g.y||{}}}},{key:"$initBrowsersChart",value:function(b){var c={labels:this.browsers.map(function(a){return a.browserName}),series:[this.browsers.map(function(b){return a.$seriesValue("No support",b.noSupport)}),this.browsers.map(function(b){return a.$seriesValue("Partial support",b.partialSupport)}),this.browsers.map(function(b){return a.$seriesValue("Supported",b.hasSupport)})]},d={horizontalBars:!0,stackBars:!0,plugins:[Chartist.plugins.tooltip({tooltipFnc:function(a,b){return a+"<br/>Global market share: "+parseFloat(b).toFixed(2)+"%"}}),Chartist.plugins.ctAxisTitle({axisX:{axisTitle:"Global market share (%)",offset:{x:0,y:30}}})],axisY:{showGrid:!1}};return new Chartist.Bar(b,c,d)}},{key:"$initOverallChart",value:function(a){var b=[g(this.browsers.map(function(a){return a.noSupport.share})),g(this.browsers.map(function(a){return a.partialSupport.share})),g(this.browsers.map(function(a){return a.hasSupport.share}))],c=function(a,b){return b>0?a+" - "+b.toFixed(2)+"%":""},d={series:b,labels:[c("No support",b[0]),c("Partial support",b[1]),c("Supported",b[2])]};return new Chartist.Pie(a,d)}},{key:"initVisuals",value:function(){this.$initBrowsersChart(".browsers-chart"),this.$initOverallChart(".overall-chart")}}],[{key:"$normalizeSupportFlag",value:function(a){return-1!==["n","y"].indexOf(a)?a:"p"}},{key:"$seriesValue",value:function(a,b){var c={value:0,meta:a};return b&&(b.share&&(c.value+=b.share),b.min&&b.max&&(c.meta+=b.min===b.max?" in version "+b.min:" in versions "+b.min+" - "+b.max)),c}}]),a}(),i=function(){function a(){var b=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];_classCallCheck(this,a),this.$data=b.data||{}}return _createClass(a,[{key:"usageOf",value:function(a){return this.$data[a]}},{key:"isAboveThreshold",value:function(a){return g(Object.values(this.$data[a]))>=d}}]),a}(),j=memoize(function(){return fetch("https://raw.githubusercontent.com/Fyrd/caniuse/master/region-usage-json/alt-ww.json").then(function(a){return b(a)}).then(function(a){return a.json()}).then(function(a){return new i(a)})}),k=function(){function a(b){_classCallCheck(this,a),this.$feature=b}return _createClass(a,[{key:"fetch",value:function(a){function b(){return a.apply(this,arguments)}return b.toString=function(){return a.toString()},b}(function(){var a=this;if(this.$feature.caniuseReport)return new Promise(function(a){return a()});var c=fetch("https://raw.githubusercontent.com/Fyrd/caniuse/master/features-json/"+this.$feature.caniuseKey+".json").then(function(a){return b(a)}).then(function(a){return a.json()});return Promise.all([c,j()]).then(function(b){var c=_slicedToArray(b,2),d=c[0],e=c[1];Object.defineProperty(a.$feature,"caniuseReport",{enumerable:!1,value:new h(a.$feature.caniuseKey,d,e)})})["catch"](function(a){return console.warn(a)})})}]),a}();a.configure(function(a){return a.singleton("CaniuseReportFetch",k)})}(WWCD.container);var _createClass=function(){function a(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}();!function(a){var b=function(){function a(b){_classCallCheck(this,a),this.$compiled=b}return _createClass(a,[{key:"dom",get:function(){return this.$compiled}}]),a}(),c=function(){function a(){_classCallCheck(this,a),this.$cache={},this.$compileMemoized=memoize(this.$compile)}return _createClass(a,[{key:"$compile",value:function(a){var c=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],d=Handlebars.compile(this.templateFor(a).html()),e=new b(d(c));return e.dom}},{key:"annotateBody",value:function(a){var b="page-"+a;$("body").removeClass(this.$bodyClass).addClass(b),this.$bodyClass=b}},{key:"run",value:function(a){var b=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return this.annotateBody(a),this.targetElementFor(a).html(this.$compileMemoized(a,b)).promise()}},{key:"templateFor",value:function(a){return this.$cache[a]||(this.$cache[a]=this.templateElementFor(a).clone()),this.$cache[a]}},{key:"templateElementFor",value:function(a){return $("."+a+"-template")}},{key:"targetElementFor",value:function(a){return $("."+a+"-target")}}]),a}();a.configure(function(a){return a.singleton("templateEngine",new c)})}(WWCD.container),function(a){var b=a.WWCD.Feature||require("./feature").WWCD.Feature,c={localNotifications:new b({id:"local-notifications",name:"Local Notifications",description:["Notifications, available through the <b>Notifications API</b>, allow authorized web applications to draw users attention\n         in a bold but standardized fashion. Notifications are generated by the web application running in a browsers' tab to be presented\n         to the user outside of the browser tab area.",'Sadly, due to Android limitations, Chrome - the only browser on Android that implemented the feature - removed support for this API in favor of\n         persistent Service Worker-based notifications, leaving the API available but effectively doing nothing.\n         See <a href="/push-notifications.html">Push Notifications</a> for more complex, but working alternative.'],api:"<dl>\n        <dt><code>Notification.requestPermission(callback)</code></dt>\n        <dd>Asks a user for the permission to show Notifications, calls <code>callback</code> with the prompt result.</dd>\n        <dt><code>Notification.permission</code></dt>\n        <dd>Returns current permission state - <code>granted</code> or <code>denied</code>.</dd>\n        <dt><code>new Notification(title, [options])</code></dt>\n        <dd>Displays local notification outside of the browser tab area.</dd>\n      </dl>",caniuse:"notifications",tests:[b.rawTest("window","Notification",function(){try{return new Notification("test"),!0}catch(a){return!1}})],demoPen:"yYJdWO",links:[{url:"http://www.w3.org/TR/notifications/",title:"Specification"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API",title:"MDN: Notifications API"},{url:"http://www.sitepoint.com/introduction-web-notifications-api/",title:"SitePoint: An Introduction to the Web Notifications API"},{url:"https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/BygptYClroM",title:"PSA: Android is *only* shipping Service Worker-based Notifications"},{url:"http://ukot.github.io/ie_web_notifications/",title:"IE Web Notifications plugin"}]}),pushNotifications:new b({id:"push-notifications",name:"Push Messages",description:["Push Messaging is the well-known re-engagement mechanism from the mobile platforms. It\n         allows the authorized web applications to subscribe the user for the remotely sent messages that can trigger displaying a notification\n         to the subscriber even if the web application is not currently focused or even opened in the browser. The message can convey encrypted\n         payload and can request displaying custom action buttons.",'The Web Platform standard for Push Messages, <b>Push API</b>, utilizes the powerful concept of <b><a href="/offline.html">Service\n         Workers</a></b>, code units installable by the web app that execute separately from the app itself. Push API also requires HTTPS installation.\n         It is currently supported in Firefox on the desktop and in Google Chrome (both Android and desktop, with <a href="https://developers.google.com/cloud-messaging/">GCM</a> setup required).','There is also a non-standard <a href="https://developer.apple.com/library/mac/documentation/NetworkingInternet/Conceptual/NotificationProgrammingGuideForWebsites/PushNotifications/PushNotifications.html#//apple_ref/doc/uid/TP40013225-CH3-SW1" target="_blank">proprietary\n         solution available for OS X in Safari</a>, based on Apple\'s own notification service, with the workflow similar to standard Push API, available via\n          <code>window.safari.pushNotification</code> interface.'],api:"<dl>\n        <dt><code>serviceWorkerRegistration.pushManager.subscribe()</code></dt>\n        <dd>Subscribes a user for the remote Push Messages. Returns a <code>Promise</code>.</dd>\n        <dt><code>serviceWorkerRegistration.pushManager.getSubscription()</code></dt>\n        <dd>Returns a <code>Promise</code> indicating current Push Messages subscription state.</dd>\n        <dt><code>serviceWorkerRegistration.showNotification(title, [options])</code></dt>\n        <dd>Displays notification outside of the browser tab area.</dd>\n        <dt><code>serviceWorker.addEventListener('push', listener)</code></dt>\n        <dd>An event fired when remote push message has been received, available within Service Worker instance.</dd>\n      </dl>",caniuse:"push-api",tests:[b.windowContains("PushManager"),b.containedIn("ServiceWorkerRegistration",a.ServiceWorkerRegistration&&a.ServiceWorkerRegistration.prototype,"showNotification"),b.containedIn("window.safari",a.safari,"pushNotification",!1)],links:[{url:"https://w3c.github.io/push-api/",title:"Specification Draft"},{url:"https://developers.google.com/web/updates/2015/03/push-notificatons-on-the-open-web",title:"Push Notifications on the Open Web - Chrome tutorial"},{url:"https://hacks.mozilla.org/2015/10/keep-pushing-it-with-the-w3c-push-api/",title:"Keep pushing it, with the W3C Push API"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Using_the_Push_API",title:"MDN: Using the Push API"},{url:"https://goroost.com/try-chrome-push-notifications",title:"Chrome Push Notifications demo"},{url:"https://developers.google.com/web/updates/2016/01/notification-actions",title:"Google Developers: Notification Actions in Chrome 48"},{url:"https://developers.google.com/web/updates/2016/03/web-push-encryption",title:"Google Developers: Web Push Payload Encryption"}]}),offline:new b({id:"offline",name:"Offline Mode",description:['Web applications can provide the offline experience using two techniques. The older implementation,\n        <b>Application Cache</b>, is <a href="http://caniuse.com/#feat=offline-apps" target="_blank">widely implemented</a> in the browsers,\n        but is now in the process of deprecation due to <a href="http://alistapart.com/article/application-cache-is-a-douchebag" target="_blank">various\n        conceptual and design flaws</a>. It is not covered here.','The modern alternative is called <b>Service Worker</b>. Web applications running on HTTPS can request the browser to install the separate\n        code unit called Service Worker. This unit is then run in the separation from the owning web application, communicating with it via events.\n        Besides being the enabler for multiple complex APIs like <a href="/push-notifications.html">Push Notifications</a>, <a href="/background-sync.html">Background Sync</a>\n        or <a href="/geofencing.html">Geofencing</a>, it can work as a fully featured network proxy. It can intercept all the HTTP requests, alter its content or behaviors,\n        or - most notably - manage offline caching.','<small>Code examples adapted from <a href="http://www.html5rocks.com/en/tutorials/service-worker/introduction/" target="_blank">HTML5 Rocks article</a>.</small>'],api:"<p><b>Within the owning web application - Installation</b></p>\n        <dl>\n          <dt><code>navigator.serviceWorker.register(path)</code></dt>\n          <dd>Installs the Service Worker code available under <code>path</code>. Returns a <code>Promise</code>.</dd>\n          <dt><code>navigator.serviceWorker.ready</code></dt>\n          <dd>Returns a <code>Promise</code> resolved with <code>serviceWorkerRegistration</code> when the Worker is initialized.</dd>\n          <dt><code>serviceWorkerRegistration.update()</code></dt>\n          <dd>Checks the server for an updated version of the Service Worker without consulting caches.</dd>\n          <dt><code>serviceWorkerRegistration.unregister()</code></dt>\n          <dd>Uninstalls the Service Worker.</dd>\n        </dl>\n        <p><b>Within the Service Worker instance - Cache prefetch</b></p>\n        <pre><code>self.addEventListener('install', function (event) {\n  event.waitUntil(\n    caches.open('my-cache-v1')\n      .then(function (cache) {\n        return cache.addAll(['/', '/styles/main.css', '/scripts/main.js']);\n      })\n  );\n});</code></pre>\n        <dl>\n          <dt><code>self.addEventListener('install', listener)</code></dt>\n          <dd>An event fired within the Service Worker when it is being installed. Useful to prefetch the resources needed in the offline mode and to prefill the cache.</dd>\n          <dt><code>event.waitUntil(promise)</code></dt>\n          <dd>An install event method that expects a <code>Promise</code> which signals the end of the worker's installation phase when resolved.</dd>\n          <dt><code>caches.open(cacheName)</code></dt>\n          <dd>Returns a <code>Promise</code> resolved with the named cache accessor object that is able to keep the resources needed for the offline mode.</dd>\n          <dt><code>cache.addAll(urls)</code></dt>\n          <dd>Adds all the resources specified with the URLs to the named cache for the future, possibly offline, use.</dd>\n        </dl>\n        <p><b>Within the Service Worker instance - Requests cache</b></p>\n        <pre><code>function isSuccessful(response) {\n  return response &&\n    response.status === 200 &&\n    response.type === 'basic';\n}\n\nself.addEventListener('fetch', function (event) {\n  event.respondWith(\n    caches.match(event.request)\n      .then(function (response) {\n        if (response) {\n          return response; // Cache hit\n        }\n\n        return fetch(event.request.clone())\n          .then(function (response) {\n            if (!isSuccessful(response)) {\n              return response;\n            }\n\n            caches.open(CACHE_NAME)\n              .then(function (cache) {\n                cache.put(event.request, response.clone());\n              });\n\n            return response;\n          }\n        );\n      })\n    );\n});</code></pre>\n        <dl>\n          <dt><code>self.addEventListener('fetch', listener)</code></dt>\n          <dd>An event fired within the Service Worker whenever any of its related browser tabs have issued a HTTP request. Useful to serve already cached response\n            or intercept and cache the incoming response.</dd>\n          <dt><code>event.respondWith(promise)</code></dt>\n          <dd>A fetch event method that expects a <code>Promise</code> which resolves with the request data to be returned to the requesting browser tab.</dd>\n          <dt><code>cache.put(request, response)</code></dt>\n          <dd>Adds the specified response for the request to the named cache for the future, possibly offline, use.</dd>\n          <dt><code>caches.match(event.request)</code></dt>\n          <dd>Returns a <code>Promise</code> resolved when the <code>fetch</code> event represents a request to the resource already cached within\n            the Service Worker's cache.</dd>\n      </dl>\n      <p>See also <b><a href=\"sw.js\" target=\"_blank\">this website's own Service Worker implementation</a></b>.</p>",caniuse:"serviceworkers",tests:[b.navigatorContains("serviceWorker")],links:[{url:"http://www.w3.org/TR/service-workers/",title:"Service Workers Specification Draft"},{url:"http://www.html5rocks.com/en/tutorials/service-worker/introduction/",title:"HTML5 Rocks: Introduction to Service Worker"},{url:"https://jakearchibald.com/2014/offline-cookbook/",title:"The offline cookbook"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker_API",title:"ServiceWorker API - MDN docs"},{url:"https://googlechrome.github.io/samples/service-worker/prefetch/index.html",title:"Service Worker Sample: Pre-fetching Resources During Registration"},{url:"https://medium.com/@slsoftworks/beyond-offline-bf5c013ec8e7",title:"Beyond Offline: Using a custom service worker to expand on your browser’s capabilities"},{url:"https://ponyfoo.com/articles/serviceworker-revolution",title:"ServiceWorker: Revolution of the Web Platform"},{url:"https://jakearchibald.github.io/isserviceworkerready/resources.html",title:"Is ServiceWorker Ready? - Jake Archibald"},{url:"https://css-tricks.com/serviceworker-for-offline/",title:"Making a Simple Site Work Offline with ServiceWorker"}]}),manifest:new b({id:"installation",name:"Home Screen Installation",description:['Web applications can provide the <code>manifest.json</code> file, standarized as the <b>Web Manifest</b>, specifying the features\n       and behaviors needed on order to treat the application as a first-class citizen on the mobile platform, i.e. adding ("installing") to the home screen\n       with the relevant icon, full screen behaviors, themes, standalone appearance without browser bar etc. It can also serve as a centralized place\n       to put all the metadata associated with the web application.','Having the Web Manifest is one of the key factors (apart from being served via HTTPS and providing\n       a <a href="/offline.html">Service Worker-based offline behavior</a>) for the web applications to be treated\n       as a <a href="https://developers.google.com/web/progressive-web-apps" target="_blank">Progressive Web App</a>. Such applications\n       get non-obtrusive "add to home screen" banners in most Android browsers.','Browser-assisted adding to the home screen is also possible on iOS using <a href="https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html" target="_blank">non-standard Apple meta tags</a>\n       describing icons and allowing to run without the Safari UI (standalone mode).'],api:'<p><b>Manifest Elements</b></p>\n<pre><code>{\n  "short_name": "Example App",\n  "name": "The Example Application",\n  "icons": [\n    {\n      "src": "launcher-icon-1x.png",\n      "sizes": "48x48"\n    },\n    {\n      "src": "launcher-icon-2x.png",\n      "sizes": "96x96"\n    }\n  ],\n  "theme_color": "#ff0000",\n  "background_color": "#ff0000",\n  "start_url": "index.html",\n  "display": "standalone"\n}</code></pre>\n<p>See also <b><a href="manifest.json" target="_blank">this website\'s own manifest.json</a></b>.</p>\n<p><b>Install Banner API</b></p>\n<dl>\n  <dt><code>window.addEventListener(\'beforeinstallprompt\')</code></dt>\n  <dd>An event fired immediately before the browser decides to present the "add to home screen" banner to the user. Allows tracking the user\'s decision,\n  delaying or preventing the banner.</dd>\n</dl>',caniuse:"web-app-manifest",tests:[b.windowContains("BeforeInstallPromptEvent")],links:[{url:"https://w3c.github.io/manifest/",title:"Specification Draft"},{url:"https://developers.google.com/web/updates/2014/11/Support-for-installable-web-apps-with-webapp-manifest-in-chrome-38-for-Android?hl=en",title:"Installable Web Apps with the WebApp Manifest in Chrome for Android"},{url:"http://html5doctor.com/web-manifest-specification/",title:"HTML5 Doctor: The Web Manifest specification"},{url:"http://brucelawson.github.io/manifest/",title:"Manifest Generator by Bruce Lawson"},{url:"https://pwa.rocks/",title:"A selection of Progressive Web Apps"},{url:"https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/",title:"Google Developers: Web App Install Banners"}]}),foregroundDetection:new b({id:"foreground-detection",name:"Foreground Detection",description:"The <b>Page Visibility API</b> is useful for the web application to know whether it is currently displayed on the front or not,\n        especially to stop resource-intensive UI animations or data refreshing when it is not needed. On the mobile devices,\n        the primary reason for that is to reduce the battery usage.",api:"<dl>\n        <dt><code>document.hidden</code></dt>\n        <dd>Returns <code>true</code> if the page is currently hidden.</dd>\n        <dt><code>document.visibilityState</code></dt>\n        <dd>Returns current visibility state: <code>visible</code>, <code>hidden</code>, <code>prerender</code> or <code>unloaded</code>.</dd>\n        <dt><code>document.addEventListener('visibilitychange')</code></dt>\n        <dd>An event fired when the visibility state of the page has changed.</dd>\n      </dl>",caniuse:"pagevisibility",demoPen:"avBpOb",tests:[b.containedIn("document",a.document,"visibilityState")],links:[{url:"https://w3c.github.io/page-visibility/",title:"Specification Draft"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API",title:"MDN: Page Visibility API"},{url:"http://www.sitepoint.com/introduction-to-page-visibility-api/",title:"SitePoint: Introduction to Page Visibility API"}]}),geolocation:new b({id:"geolocation",name:"Geolocation",description:"The <b>Geolocation API</b> lets authorized web applications to access the location data provided by the device -\n        obtained using either GPS or from the network environment. Apart from the one-off location query, it gives a way for the app to be notified\n        about the location changes.",api:"<dl>\n        <dt><code>navigator.geolocation.getCurrentLocation(callback)</code></dt>\n        <dd>Runs one-off query for location with coordinates, accuracy, altitude & speed, if available.</dd>\n        <dt><code>navigator.geolocation.watchLocation(callback)</code></dt>\n        <dd>Sets up observing for location changes, invoking callback for every change.</dd>\n      </dl>",caniuse:"geolocation",demoPen:"ojYoqB",tests:[b.navigatorContains("geolocation")],links:[{url:"http://www.w3.org/TR/geolocation-API/",title:"Specification"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation",title:"MDN: Using geolocation"}]}),bluetooth:new b({id:"bluetooth",name:"Bluetooth",description:["The <b>Web Bluetooth API</b> is a low-level API allowing web applications to access the services exposed by nearby Bluetooth-enabled devices."],api:"<dl>\n        <dt><code>navigator.bluetooth.requestDevice(serviceFilters)</code></dt>\n        <dd>Scans for the device in range supporting the requested services. Returns a <code>Promise</code>.</dd>\n        <dt><code>device.gatt.connect()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the server object providing access to the services available on the device.</dd>\n        <dt><code>server.getPrimaryService(name)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the particular Bluetooth service on the device.</dd>\n        <dt><code>service.getCharacteristic(name)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the GATT characteristic object.</dd>\n        <dt><code>characteristic.readValue()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with a raw value from the GATT characteristic.</dd>\n        <dt><code>characteristic.writeValue(value)</code></dt>\n        <dd>Writes a new value for the GATT characteristic.</dd>\n      </dl>",tests:[b.navigatorContains("bluetooth")],caniuse:"web-bluetooth",demoPen:"VvPaRY",links:[{url:"https://webbluetoothcg.github.io/web-bluetooth/",title:"Specification Draft"},{url:"https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web",title:"Interact with BLE devices on the Web"}]}),nfc:new b({id:"nfc",name:"NFC",description:["The <b>Web NFC API</b> is a low-level API allowing web applications to access and exchange the data with the Near-Field Communication devices, such as NFC tags.",'Current support is limited to an experimental implementation in Chrome, available behind an "Experimental Web Platform Features" on Android. There was also Firefox OS experimental implementation that is <code>moz</code>-prefixed and doesn\'t follow the current state of the specification draft.'],
api:"<dl>\n        <dt><code>navigator.nfc.watch(callback, options)</code></dt>\n        <dd>Registers for a notification about the data read from the NFC adapter specified by <code>options</code>.</dd>\n        <dt><code>navigator.nfc.push(message, options)</code></dt>\n        <dd>Triggers sending the <code>message</code> (string, <code>ArrayBuffer</code> or NDEF record structure) to the NFC adapter specified by <code>options</code>.</dd>\n      </dl>",tests:[b.navigatorContains("nfc")],demoPen:"XmpKjQ",links:[{url:"https://w3c.github.io/web-nfc/",title:"Specification Draft"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/NFC_API/Using_the_NFC_API",title:"MDN: Using the NFC API (covers outdated spec revision)"}]}),proximity:new b({id:"proximity",name:"Proximity Sensors",description:["The <b>Proximity Events API</b> allows web applications to get the access to the data from the device's proximity sensors, detecting whether there is a physical object near the device.","The first approach to supporting proximity sensor on the web - as a standalone API - was implemented in Firefox. Since then the specification was rewritten to make use of the new <b>Generic Sensors API</b>, but no vendor implemented that spec as of September 2016."],api:"<p><b>The old, standalone API</b></p>\n      <dl>\n        <dt><code>window.addEventListener('deviceproximity', listener)</code></dt>\n        <dd>An event fired when the device has sensed the physical object proximity, containing approximate distance information.</dd>\n        <dt><code>window.addEventListener('userproximity', listener)</code></dt>\n        <dd>An event fired when the device has roughly sensed the physical object proximity, containing boolean <code>near</code> flag only.</dd>\n      </dl>\n      <p><b>The new, generic API</b></p>\n      <dl>\n        <dt><code>sensor = new ProximitySensor()</code></dt>\n        <dd>Creates an object serving as an accessor to the proximity sensor readings.</dd>\n        <dt><code>sensor.addEventListener('change', listener)</code></dt>\n        <dd>An event fired when the physical object proximity has changed, containing approximate distance information in cm (<code>event.reading.distance</code>) and boolean <code>event.reading.near</code> flag.</dd>\n        <dt><code>sensor.start()</code></dt>\n        <dd>Starts listening for the sensor readings.</dd>\n      </dl>",caniuse:"proximity",tests:[b.windowContains("ondeviceproximity"),b.windowContains("onuserproximity"),b.windowContains("ProximitySensor")],demoPen:"jWMRNw",links:[{url:"https://w3c.github.io/proximity/",title:"Proximity API Specification Draft"},{url:"https://w3c.github.io/sensors/",title:"Generic Sensor API Specification Draft"},{url:"http://www.sitepoint.com/introducing-proximity-api/",title:"SitePoint: Introducing the Proximity API"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Proximity_Events",title:"MDN: Proximity Events"}]}),ambientLight:new b({id:"ambient-light",name:"Ambient Light",description:["The <b>Ambient Light API</b> allows web applications to access the light intensity level measured by the device's light sensor, normally built-in with the device's camera.",'The first approach to supporting light intensity sensor on the web - as a standalone API - was implemented in Firefox back in 2013. Since then the specification was rewritten to make use of the new <b>Generic Sensors API</b>. This flavor, as of summer 2017, is implemented in Microsoft Edge and - behind the "Experimental Web Platform Features" flag - in Google Chrome.'],api:"<p><b>The old, standalone API</b></p>\n      <dl>\n        <dt><code>window.addEventListener('devicelight', listener)</code></dt>\n        <dd>An event fired when the device's light sensor measured value has changed, containing the light intensity expressed in lux.</dd>\n      </dl>\n      <p><b>The new, generic API</b></p>\n      <dl>\n        <dt><code>sensor = new AmbientLightSensor()</code></dt>\n        <dd>Creates an object serving as an accessor to the light intensity sensor readings.</dd>\n        <dt><code>sensor.addEventListener('reading', listener)</code></dt>\n        <dd>An event fired when the light intensity has changed, with <code>event.reading.illuminance</code> property containing the light intensity expressed in lux.</dd>\n        <dt><code>sensor.start()</code></dt>\n        <dd>Starts listening for the sensor readings.</dd>\n      </dl>",caniuse:"ambient-light",tests:[b.windowContains("ondevicelight"),b.windowContains("AmbientLightSensor")],demoPen:"OyWZqY",links:[{url:"https://w3c.github.io/ambient-light/",title:"Ambient Light API Specification Draft"},{url:"https://w3c.github.io/sensors/",title:"Generic Sensor API Specification Draft"},{url:"http://modernweb.com/2014/05/27/introduction-to-the-ambient-light-api/",title:"Introduction to the Ambient Light API"}]}),mediaCapture:new b({id:"camera-microphone",name:"Audio & Video Capture",description:['The <b>Media Capture API</b> allows authorized web applications to access the streams from the device\'s audio and video capturing\n        interfaces, i.e. to use the data available from the camera and the microphone. The streams exposed by the API can be bound directly to the HTML\n        <code>&lt;audio&gt;</code> or <code>&lt;video&gt;</code> elements or read and manipulated in the code, including further more specific processing via <a href="/photos.html">Image Capture API</a>, <a href="/recording.html">Media Recorder API</a> or <a href="/realtime.html">Real-Time Communication</a>.','There is also a higher level alternative <a href="http://www.wufoo.com/html5/attributes/20-accept.html">built-in into mobile operating systems</a>\n        like iOS and Android that doesn\'t require any JavaScript API - the basic HTML <code>&lt;file type="input" accept="image/*"&gt;</code> element allows\n        launching any application that provides an image file, including camera.'],api:"<dl>\n        <dt><code>navigator.mediaDevices.getUserMedia(constraints)</code></dt>\n        <dd>Prompts user for an access to the media interface specified by the <code>constraints</code>\n          and returns a <code>Promise</code> that is resolved with the interface's stream handler.</dd>\n        <dt><code>stream.getAudioTracks()</code></dt>\n        <dd>Returns a collection of audio tracks objects being provided by the device's microphone.</dd>\n        <dt><code>stream.getVideoTracks()</code></dt>\n        <dd>Returns a collection of video tracks objects being provided by the device's camera.</dd>\n        <dt><code>mediaElement.srcObject = stream</code></dt>\n        <dd>Sets a stream to be rendered into the provided <code>&lt;audio&gt;</code> or <code>&lt;video&gt;</code> DOM element.</dd>\n      </dl>\n      <p>Previous version of the standard, supported with vendor prefixes, contained the callback-based <code>getUserMedia</code> method directly within\n      the <code>navigator</code> element:</p>\n      <pre><code>navigator.webkitGetUserMedia(constraints, successCallback, errorCallback)</code></pre>",caniuse:"stream",tests:[b.navigatorContains("getUserMedia"),b.navigatorContains("mediaDevices")],demoPen:"YyZKPJ",links:[{url:"https://w3c.github.io/mediacapture-main/",title:"Specification Draft"},{url:"http://www.html5rocks.com/en/tutorials/getusermedia/intro/",title:"HTML5 Rocks: Capturing Audio & Video in HTML5"},{url:"http://blogs.windows.com/msedgedev/2015/05/13/announcing-media-capture-functionality-in-microsoft-edge/",title:"Announcing media capture functionality in Microsoft Edge"},{url:"https://dev.opera.com/blog/webcam-orientation-preview/",title:"Native Webcam Support and Orientation Events — Technology Preview from Opera"},{url:"http://www.sitepoint.com/face-proximity-detection-with-javascript/",title:"SitePoint: Face Proximity Detection with JavaScript"}]}),networkInfo:new b({id:"network-type-speed",name:"Network Type & Speed",description:"The <b>Network Information API</b> allows web applications to read the current network type and the maximum downlink speed\n        and to subscribe for a notification when the network type has changed.",api:"<dl>\n        <dt><code>navigator.connection.type</code></dt>\n        <dd>Returns the type of the current connection, i.e. <code>cellular</code>, <code>wifi</code>, <code>none</code> etc.</dd>\n        <dt><code>navigator.connection.downlinkMax</code></dt>\n        <dd>Returns the theoretical maxinum downlink speed, in Mbps, for the underlying technology of the current connection.</dd>\n        <dt><code>navigator.connection.addEventListener('change', listener)</code></dt>\n        <dd>An event fired when the connection type has changed.</dd>\n      </dl>",tests:[b.navigatorContains("connection")],caniuse:"netinfo",demoPen:"LpWPvv",links:[{url:"https://w3c.github.io/netinfo/",title:"Specification Draft"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API",title:"MDN: Network Information API"}]}),online:new b({id:"online-state",name:"Online State",description:"Browsers expose a network connection availability information to the web application, so that the applications may react properly, i.e.\n        stop all the operations utilising the network and switch to cached data when offline condition was detected.",api:"<dl>\n        <dt><code>navigator.onLine</code></dt>\n        <dd>Returns <code>true</code> when the browser detects network connection available, <code>false</code> otherwise.</dd>\n        <dt><code>window.addEventListener('online', listener)</code></dt>\n        <dd>An event fired when the browser detects network connection has become available.</dd>\n        <dt><code>window.addEventListener('offline', listener)</code></dt>\n        <dd>An event fired when the browser detects network connection has become unavailable.</dd>\n      </dl>",caniuse:"online-status",tests:[b.navigatorContains("onLine")],demoPen:"Qjpveg",links:[{url:"https://html.spec.whatwg.org/multipage/browsers.html#browser-state",title:"Specification"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine#Specification",title:"MDN description"}]}),vibration:new b({id:"vibration",name:"Vibration",description:"The <b>Vibration API</b> allows web applications to use the device's built-in vibration, if one is present.",api:"<dl>\n        <dt><code>navigator.vibrate(durationOrPattern)</code></dt>\n        <dd>Vibrate the device once for the duration given or according to durations pattern given.</dd>\n      </dl>",caniuse:"vibration",tests:[b.navigatorContains("vibrate")],demoPen:"VvpxrM",links:[{url:"http://dev.w3.org/2009/dap/vibration/",title:"Specification Draft"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Vibration_API",title:"MDN: Vibration API"},{url:"http://illyism.com/journal/vibrate-mobile-phone-web-vibration-api",title:"Learn how to vibrate your mobile phone on the web using the vibration API"}]}),batteryStatus:new b({id:"battery-status",name:"Battery Status",description:"The <b>Battery Status API</b> allows web applications to get the information about the device's power source, battery charge level,\n        expected time of charging or discharging. It also exposes events whenever any of the information available changes. The API allows the applications\n        to turn on/off its energy inefficient operations according to the power levels.",api:"<dl>\n        <dt><code>navigator.getBattery()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the object containing battery information.</dd>\n        <dt><code>battery.charging</code></dt>\n        <dd>Returns <code>true</code> if the device is currently being charged.</dd>\n        <dt><code>battery.chargingTime</code></dt>\n        <dd>Returns the number of seconds remaining until the battery is fully charged.</dd>\n        <dt><code>battery.dischargingTime</code></dt>\n        <dd>Returns the number of seconds remaining until the battery is fully discharged.</dd>\n        <dt><code>battery.level</code></dt>\n        <dd>Returns the battery charging level as the number in 0 to 1 range.</dd>\n        <dt><code>battery.addEventListener('chargingchange', listener)</code></dt>\n        <dd>An event fired when <code>battery.charging</code> value has changed.</dd>\n        <dt><code>battery.addEventListener('chargingtimechange', listener)</code></dt>\n        <dd>An event fired when <code>battery.chargingTime</code> value has changed.</dd>\n        <dt><code>battery.addEventListener('dischargingtimechange', listener)</code></dt>\n        <dd>An event fired when <code>battery.dischargingTime</code> value has changed.</dd>\n        <dt><code>battery.addEventListener('levelchange', listener)</code></dt>\n        <dd>An event fired when <code>battery.level</code> value has changed.</dd>\n      </dl>",caniuse:"battery-status",tests:[b.navigatorContains("getBattery"),b.navigatorContains("battery")],demoPen:"epvKNB",links:[{url:"https://dvcs.w3.org/hg/dap/raw-file/default/battery/Overview.html",title:"Specification Draft"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Battery_Status_API",title:"MDN: Battery Status API"}]}),storage:new b({id:"storage",name:"Offline Storage",description:['There were <a href="http://diveinto.html5doctor.com/storage.html" target="_blank">several iterations</a> of prototypes\n          and standardized technologies for offline storage capabilities for web applications. First attempts were either just hacky workarounds\n          (like to store data in cookies) or required additional software (like Flash or Google Gears). Later, Web SQL idea, basically to include SQLite\n          natively within a browser, was coined and <a href="http://caniuse.com/#feat=sql-storage" target="_blank">implemented throughout some browsers</a>,\n          but deprecated later <a href="https://hacks.mozilla.org/2010/06/beyond-html5-database-apis-and-the-road-to-indexeddb/" target="_blank">due to\n          the standardization difficulties</a>.','Right now there are at least three distinct and independent technologies standardized and available. The simplest one is <b>Web Storage</b> - \n          a key-value string storage, allowing web applications to store data either persistently and cross-window (<code>localStorage</code>) \n          or for a single session in a single browser tab (<code>sessionStorage</code>). The more sophisticated <b>IndexedDB</b> is a low-level API\n          over database-like structures with transactions and cursors iterating by indexes. The newest addition - <b>Cache API</b> is a specialized\n          solution to keep <code>Request</code>/<code>Response</code> pairs, useful mostly within <a href="/offline.html">Service Worker</a> implementation.','Live example and usage data shown here are referring to <b>Web Storage</b> engine. For details on IndexedDB,\n          refer to <a href="http://caniuse.com/#feat=indexeddb" target="_blank">caniuse.com</a>.',"The actual persistence of data stored in any of the persistent stores (be it <code>localStorage</code>, IndexedDB or Cache API) is browser-managed\n          and by default might be wiped out without end-user consent in case of memory pressure conditions. To address this problem, <b>Storage API</b>\n          was introduced - it gives the web applications a method to store the data in a fully reliable way if the user permits it to do so. Chrome's\n          implementation grants this permission based on user-engagement-based heuristic, while Firefox asks for the permission explicitly."],api:'<p><b>Web Storage API</b></p>\n      <dl>\n        <dt><code>window.sessionStorage</code></dt>\n        <dd>Gives an access to the Web Storage engine with per-session objects lifetime.</dd>\n        <dt><code>window.localStorage</code></dt>\n        <dd>Gives an access to the Web Storage engine with persistent objects lifetime.</dd>\n        <dt><code>storage.setItem(key, value)</code></dt>\n        <dd>Saves the <code>value</code> string under the <code>key</code> in the selected storage engine.</dd>\n        <dt><code>storage.getItem(key)</code></dt>\n        <dd>Returns the string value stored under the <code>key</code> in the selected storage engine.</dd>\n        <dt><code>storage.removeItem(key)</code></dt>\n        <dd>Removes the string value stored under the <code>key</code> from the selected storage engine.</dd>\n        <dt><code>storage.clear()</code></dt>\n        <dd>Removes all the string values stored in the selected storage engine.</dd>\n        <dt><code>window.addEventListener(\'storage\', listener)</code></dt>\n        <dd>An event fired when the data stored in either <code>sessionStorage</code> or <code>localStorage</code> has been changed externally.</dd>\n      </dl>\n      <p><b>IndexedDB</b></p>\n      <dl>\n        <dt><code>let openRequest = window.indexedDB.open(name, version)</code></dt>\n        <dd>Triggers opening a database connection to either existing or newly-created database. \n          Returns an object that fires <code>success</code> event when the connection is established.</dd>\n        <dt><code>let db = openReques.result</code></dt>\n        <dd>Gives an access to the open database connection instance - available after <code>success</code> was fired.</dd>\n        <dt><code>db.createObjectStore(storeName, options)</code></dt>\n        <dd>Creates a named container (object store) for objects in the opened database.</dd>\n        <dt><code>let tx = db.transaction(storeName)</code></dt>\n        <dd>Opens a data-reading or data-manipulation transaction scoped to the given object store(s).</dd>\n        <dt><code>tx.objectStore.put(value, key)</code></dt>\n        <dd>Saves the <code>value</code> in the currently opened object store.</dd>\n        <dt><code>tx.objectStore.get(key)</code></dt>\n        <dd>Gets the object stored under a <code>key</code> in the currently opened object store.</dd>\n        <dt><code>tx.createIndex(name, keyPath, options)</code></dt>\n        <dd>Creates an index that allows to seek for the stored objects using the property specified via <code>keyPath</code>.</dd>\n        <dt><code>tx.index(name).get(key)</code></dt>\n        <dd>Gets the object having the particular index <code>keyPath</code> equal to the <code>key</code> specified.</dd>\n      </dl>\n      <p><b>Cache API</b></p>\n      <dl>\n        <dt><code>let cache = window.caches.open(key)</code></dt>\n        <dd>Returns a <code>Promise</code> that resolves to a store "bucket" object giving an access to the cached <code>Response</code> objects.</dd>\n        <dt><code>cache.put(request, response)</code></dt>\n        <dd>Saves the <code>Response</code> object to the cache with its corresponding <code>Request</code> object.</dd>\n        <dt><code>cache.match(request, option)</code></dt>\n        <dd>Returns a <code>Promise</code> that resolves to the <code>Response</code> object matching the specified <code>Request</code> \n          (with the <code>options</code>-controlled level of exactness) found in the opened cache "bucket".</dd>\n        <dt><code>cache.delete(request, option)</code></dt>\n        <dd>Removes the <code>Response</code> object matching the specified <code>Request</code>\n          (with the <code>options</code>-controlled level of exactness) found in the opened cache "bucket".</dd>\n      </dl>\n      <p><b>Storage API (persistence permission)</b></p>\n      <dl>\n        <dt><code>navigator.storage.persist()</code></dt>\n        <dd>Requests a permission to turn the data saved by the web application into persistent data. \n          Returns a <code>Promise</code> that resolves with a boolean value indicating whether the permission was granted.</dd>\n        <dt><code>navigator.storage.persisted()</code></dt>\n        <dd>Returns a <code>Promise</code> that resolves with a boolean value indicating whether the persistent storage permission was already granted.</dd>\n      </dl>',caniuse:"namevalue-storage",tests:[b.windowContains("sessionStorage"),b.windowContains("localStorage"),b.windowContains("indexedDB"),b.windowContains("caches"),b.navigatorContains("storage")],demoPen:"NGpoON",links:[{url:"https://html.spec.whatwg.org/multipage/webstorage.html",title:"Web Storage Specification"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API",title:"MDN: Web Storage API"},{url:"https://www.w3.org/TR/IndexedDB/",title:"IndexedDB Specification"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API",title:"MDN: IndexedDB API"},{url:"https://w3c.github.io/ServiceWorker/v1/#cache",title:"Cache API Specification"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Cache",title:"MDN: Cache API"},{url:"https://storage.spec.whatwg.org/",title:"Storage API Specification"},{url:"https://developers.google.com/web/updates/2016/06/persistent-storage",title:"Google Developers: Persistent Storage"}]}),files:new b({id:"files",name:"File Access",description:"The <b>File API</b> gives web applications an access to the filesystem-level information about the files that the user decides to share\n        with the application, i.e. size, MIME type, modification date, content, without sending the file to the server.",api:"<dl>\n        <dt><code>fileInputElement.files</code></dt>\n        <dd>Returns a collection of file objects that were selected by the user using <code>&lt;input type=\"file\"&gt;</code>DOM element.</dd>\n        <dt><code>file.name</code></dt>\n        <dd>Returns the original name of the file, without the path.</dd>\n        <dt><code>file.size</code></dt>\n        <dd>Returns the file size in bytes.</dd>\n        <dt><code>file.type</code></dt>\n        <dd>Returns the file's MIME type.</dd>\n        <dt><code>file.lastModifiedDate</code></dt>\n        <dd>Returns the file's last modification date.</dd>\n        <dt><code>fileReader.readAsText(file)</code></dt>\n        <dd>Initiates a process of reading the file and encoding its content as text.</dd>\n        <dt><code>fileReader.addEventListener('load', listener)</code></dt>\n        <dd>An event fired when the reading operation has completed successfully. The data read is available via <code>fileReader.result</code> property.</dd>\n      </dl>",caniuse:"fileapi",tests:[b.windowContains("File")],demoPen:"pjPLRW",links:[{url:"https://w3c.github.io/FileAPI/",title:"Specification Draft"},{url:"https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications",title:"MDN: Using files from web applications"},{url:"http://www.html5rocks.com/en/tutorials/file/dndfiles/",title:"Reading files in JavaScript using the File APIs"}]}),permissions:new b({id:"permissions",name:"Permissions",description:"The <b>Permissions API</b> provides the uniform way for web applications to query for the permission status for the features\n        that require user consent, like notifications or geolocation. With Permissions API the app can list the permissions\n        granted by the user without actually trying to use the feature.",api:"<dl>\n        <dt><code>navigator.permissions.query({name: feature})</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the object representing the permission status of the requested feature.</dd>\n        <dt><code>permissionStatus.state</code></dt>\n        <dd>Returns the permission status of the requested feature, either <code>granted</code>, <code>denied</code> or - in case the user was not yet asked - <code>prompt</code>.</dd>\n        <dt><code>permissionStatus.addEventListener('change', listener)</code></dt>\n        <dd>An event fired when the permission status of the requested feature has changed.</dd>\n      </dl>",caniuse:"permissions-api",tests:[b.navigatorContains("permissions")],demoPen:"OymKdE",links:[{url:"https://w3c.github.io/permissions/",title:"Specification Draft"},{url:"https://developers.google.com/web/updates/2015/04/permissions-api-for-the-web",title:"Permissions API for the Web"}]}),contacts:new b({id:"contacts",name:"Contacts",description:["The <b>Contacts API</b> gives privileged web applications an access to the user's address book maintained in the system\n        and allow reading & modifying the contacts through the vCard-like format.",'The initial version of the API was created for Firefox OS and implemented in Firefox, but\n        <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=927869" target="_blank">disabled</a> due to implementation flaws. There is\n        no working implementation available as of today and no interest in that area is visible.'],api:"<dl>\n        <dt><code>navigator.contacts.find(filterAndSortOptions)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the array of contacts from the address book according to the criteria specified.</dd>\n        <dt><code>navigator.contacts.save(new Contact())</code></dt>\n        <dd>Returns a <code>Promise</code> resolved when the newly created contact is inserted into the address book.</dd>\n        <dt><code>navigator.contacts.remove(contact)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved when the contact is removed from the address book.</dd>\n        <dt><code>navigator.contacts.addEventListener('contactschange', listener)</code></dt>\n        <dd>An event fired when the address book data has changed, containing all the added, removed and changed contact entries.</dd>\n      </dl>",tests:[b.containedIn("navigator.contacts",a.navigator&&(a.navigator.contacts||a.navigator.mozContacts),"oncontactschange")],demoPen:"rxWYjy",links:[{url:"https://www.w3.org/2012/sysapps/contacts-manager-api/",title:"Specification Draft"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Contacts_API",title:"MDN: Contacts API"}]}),quota:new b({id:"storage-quota",name:"Storage Quotas",description:["There were several attempts made, mostly by Google Chrome, to allow web applications to query the system for the size of the storage space\n         currently used and available for the application. The most recent one, <b>Quota Estimation API</b>, is also in development in Firefox as of June 2017.","The older implementation, supported only in Chrome with <code>webkit-</code> prefix, maintained a separation between the temporary and persistent storage\n         and allowed the web applications to request for more storage space, if needed."],api:"<dl>\n        <dt><code>navigator.storage.estimate()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the storage space estimated values; see below.</dd>\n        <dt><code>estimate.usage</code></dt>\n        <dd>Returns the estimated size of the storage currently used by the application, in bytes.</dd>\n        <dt><code>estimate.quota</code></dt>\n        <dd>Returns the estimated total size of the storage available for the application, in bytes, including already used.</dd>\n      </dl>",tests:[b.containedIn("navigator.storage",(a.navigator||{}).storage,"estimate"),b.navigatorContains("persistentStorage",!1)],demoPen:"LLyLpG",links:[{url:"https://storage.spec.whatwg.org/",title:"Specification Draft"},{url:"http://www.html5rocks.com/en/tutorials/offline/quota-research/",title:"Quota limitations analysis"}]}),touch:new b({id:"touch",name:"Touch Gestures",description:["Traditionally, web relies on a mouse and a keyboard as the only input devices, while mobile devices are mostly controlled by touch.\n        Mobile web started with a bit touchy solution of translating touch events to mouse events like <code>mousedown</code>.","Newer HTML5 approach is to embrace touch as the first-class input mean, allowing web applications to intercept and identify complex multitouch\n         gestures, free-hand drawing etc. Unfortunately, the support is twofold - either via touch events like <code>touchstart</code> that were first\n         introduced by Apple and standardized later as a de-facto solution, when other vendors went the same route, or via the newer,\n         more general <b>Pointer Events</b> specification, initiated by Microsoft."],api:"<p><b>Touch Events API</b></p>\n        <dl>\n          <dt><code>element.addEventListener('touchstart', listener)</code></dt>\n          <dd>An event triggered when the finger has been placed on a DOM element.</dd>\n          <dt><code>element.addEventListener('touchmove', listener)</code></dt>\n          <dd>An event triggered when the finger has been dragged along a DOM element.</dd>\n          <dt><code>element.addEventListener('touchend', listener)</code></dt>\n          <dd>An event triggered when the finger has been removed from a DOM element.</dd>\n        </dl>\n        <p><b>Pointer Events API</b></p>\n        <dl>\n          <dt><code>element.addEventListener('pointerdown', listener)</code></dt>\n          <dd>An event triggered when the finger has been placed on a DOM element.</dd>\n          <dt><code>element.addEventListener('pointermove', listener)</code></dt>\n          <dd>An event triggered when the finger has been dragged along a DOM element.</dd>\n          <dt><code>element.addEventListener('pointerup', listener)</code></dt>\n          <dd>An event triggered when the finger has been removed from a DOM element.</dd>\n        </dl>",caniuse:"touch",demoPen:"LpbVoV",tests:[b.windowContains("ontouchstart"),b.windowContains("onpointerdown")],links:[{url:"https://w3c.github.io/touch-events/",title:"Touch Events API Specification"},{url:"https://w3c.github.io/pointerevents/",title:"Pointer Events API Specification Draft"},{url:"http://www.quirksmode.org/mobile/tableTouch.html",title:"Detailed support table"},{url:"http://www.html5rocks.com/en/mobile/touch/",title:"Multi-touch Web Development"}]}),accelerometer:new b({id:"accelerometer",name:"Device Motions",description:["The first-generation device motions support is a part of <b>Device Orientation API</b>. It allows web applications to access the accelerometer data\n        expressed as acceleration (in m/s<sup>2</sup>) and gyroscope data expressed as rotation angle change (in &deg;/s) for each of the three dimensions, provided as events.","There also exist the newer, separate specifications for each sensor type, based on the <b>Generic Sensor API</b> - the <b>Accelerometer Sensor API</b> and <b>Gyroscope Sensor API</b>. Both are expected to be implemented for the first time in Chrome in late 2016.",'For the detection of the device\'s static position and orientation, see <a href="/device-orientation.html">Device Orientation</a>.'],api:"<p><b>As a part of Device Orientation API</b></p>\n      <dl>\n        <dt><code>window.addEventListener('devicemotion', listener)</code></dt>\n        <dd>An event fired when the significant changes in the device's acceleration or rotation has occured.</dd>\n        <dt><code>event.acceleration</code></dt>\n        <dd>A part of the event's payload returning the data about the current device's acceleration excluding gravity for all three axes\n         (<code>acceleration.x</code>, <code>acceleration.y</code>, <code>acceleration.z</code>).</dd>\n        <dt><code>event.accelerationIncludingGravity</code></dt>\n        <dd>A part of the event's payload returning the data about the current device's acceleration including gravity if the device is unable\n          to provide the data without the gravity effect using <code>event.acceleration</code>.</dd>\n        <dt><code>event.rotationRate</code></dt>\n        <dd>A part of the event's payload returning the data about the current device's rotation rates for all three axes\n         (<code>rotationRate.alpha</code>, <code>rotationRate.beta</code>, <code>rotationRate.gamma</code>).</dd>\n        <dt><code>event.interval</code></dt>\n        <dd>A part of the event's payload returning the interval (in ms) at which the data is obtained from the accelerometer.</dd>\n      </dl>\n      <p><b>Accelerometer API</b></p>\n      <dl>\n        <dt><code>sensor = new AccelerometerSensor({includeGravity: true})</code></dt>\n        <dd>Creates an object serving as an accessor to the accelerometer readings and specifying whether the acceleration values should include gravity.</dd>\n        <dt><code>sensor.addEventListener('change', listener)</code></dt>\n        <dd>An event fired when the accelerometer reading has changed, containing acceleration values in m/s<sup>2</sup> for all three axes (<code>event.reading.accelerationX</code>, <code>event.reading.accelerationY</code>, <code>event.reading.accelerationZ</code>).</dd>\n        <dt><code>sensor.start()</code></dt>\n        <dd>Starts listening for the sensor readings.</dd>\n      </dl>\n      <p><b>Gyroscope API</b></p>\n      <dl>\n        <dt><code>sensor = new GyroscopeSensor()</code></dt>\n        <dd>Creates an object serving as an accessor to the gyroscope readings.</dd>\n        <dt><code>sensor.addEventListener('change', listener)</code></dt>\n        <dd>An event fired when the gyroscope reading has changed, containing rotation rates in rad/s for all three axes (<code>event.reading.rotationRateX</code>, <code>event.reading.rotationRateY</code>, <code>event.reading.rotationRateZ</code>).</dd>\n        <dt><code>sensor.start()</code></dt>\n        <dd>Starts listening for the sensor readings.</dd>\n      </dl>",
caniuse:"deviceorientation",tests:[b.windowContains("DeviceMotionEvent"),b.windowContains("AccelerometerSensor"),b.windowContains("GyroscopeSensor")],demoPen:"BodzBg",links:[{url:"https://w3c.github.io/deviceorientation/spec-source-orientation.html#devicemotion",title:"Device Orientation API Specification Draft"},{url:"https://w3c.github.io/accelerometer/",title:"Accelerometer API Specification Draft"},{url:"https://w3c.github.io/gyroscope/",title:"Gyroscope API Specification Draft"},{url:"https://w3c.github.io/sensors/",title:"Generic Sensor API Specification Draft"},{url:"http://www.html5rocks.com/en/tutorials/device/orientation/",title:"HTML5 Rocks: This End Up: Using Device Orientation"}]}),speech:new b({id:"speech-recognition",name:"Speech Recognition",description:["The speech recognition part of the <b>Web Speech API</b> allows authorized web applications to access the device's microphone\n        and produces a transcript of the voice being recorded. This allows web applications to use voice as one of the input & control method,\n        similar to touch or keyboard.",'Technically, the speech recognition functionality can also be achieved by <a href="/camera-microphone.html">accessing the microphone</a>\n        and processing the audio stream using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API" target="_blank">Web Audio API</a>.\n        An examplary library that takes such an approach is <a href="http://syl22-00.github.io/pocketsphinx.js/" target="_blank">pocketsphinx.js</a>.'],api:"<dl>\n        <dt><code>let recognition = new SpeechRecognition()</code></dt>\n        <dd>Creates an object used to configure the recognition process and to receive events about the recognition results.</dd>\n        <dt><code>recognition.continuous</code></dt>\n        <dd>A boolean property indicating whether the process should stop after the first final transcripts received (when <code>false</code>, the default)\n          or send multiple events, until the process is explicitly stopped (when <code>true</code>).</dd>\n        <dt><code>recognition.interimResults</code></dt>\n        <dd>A boolean property indicating whether interim (not-yet-final) transcripts should be provided, <code>false</code> by default.</dd>\n        <dt><code>recognition.lang</code></dt>\n        <dd>A property to set up the language for the recognition.</dd>\n        <dt><code>recognition.addEventListener('result', listener)</code></dt>\n        <dd>An event fired when the process has produced the transcripts for the piece of audio recorded. The listener is called with an array of results,\n          each containing a boolean <code>final</code> flag indicating whether the result might be updated in the future event (when <code>false</code>)\n          or not and the collection of alternative transcripts, each with <code>transcript</code> itself and a <code>confidence</code> value.</dd>\n        <dt><code>recognition.addEventListener('nomatch', listener)</code></dt>\n        <dd>An event fired when the process has not produced any transcripts for the piece of audio recorded with the confidence exceeding the minimal\n          threshold, i.e. it is not possible to provide the transcription.</dd>\n        <dt><code>recognition.start()</code></dt>\n        <dd>Starts the recognition process.</dd>\n        <dt><code>recognition.stop()</code></dt>\n        <dd>Stops the recognition process; useful when <code>recognition.continuous</code> is set to <code>true</code>.</dd>\n      </dl>",caniuse:"speech-recognition",tests:[b.windowContains("SpeechRecognition")],links:[{url:"https://dvcs.w3.org/hg/speech-api/raw-file/tip/speechapi.html#speechreco-section",title:"Specification"},{url:"http://www.sitepoint.com/introducing-web-speech-api/",title:"SitePoint: Introducing the Web Speech API"},{url:"https://developers.google.com/web/updates/2013/01/Voice-Driven-Web-Apps-Introduction-to-the-Web-Speech-API",title:"Voice Driven Web Apps: Introduction to the Web Speech API"},{url:"https://shaungallagher.github.io/say_restyle/",title:"Demo - Edit the webpage with your voice"}]}),clipboard:new b({id:"clipboard",name:"Clipboard (Copy & Paste)",description:"The <b>Clipboard API</b> gives web applications a way to react on cut, copy and paste operations performed by the user as well as\n        read from or write to the system clipboard directly on behalf of user.",api:"<dl>\n        <dt><code>document.addEventListener('cut/copy/paste', listener)</code></dt>\n        <dd>An event fired when the user invoked the particular clipboard operation (either cut, copy or paste).</dd>\n        <dt><code>event.clipboardData.setData('text/plain', data)</code></dt>\n        <dd>Sets the data that is to be written to the clipboard by the cut or copy operations in the specified format.</dd>\n        <dt><code>event.clipboardData.getData('text/plain')</code></dt>\n        <dd>Returns the data that has been read from the clipboard by the paste operation in the specified format.</dd>\n        <dt><code>document.execCommand('cut/copy/paste')</code></dt>\n        <dd>Programatically invokes the specified clipboard operation (either cut, copy or paste) on the data or element currently having a focus.</dd>\n      </dl>",caniuse:"clipboard",tests:[b.windowContains("ClipboardEvent"),b.containedIn("document",a.document,"oncut"),b.containedIn("document",a.document,"oncopy"),b.containedIn("document",a.document,"onpaste")],demoPen:"bVozGY",links:[{url:"https://w3c.github.io/clipboard-apis/",title:"Specification Draft"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent",title:"MDN: ClipboardEvent"},{url:"https://www.lucidchart.com/techblog/2014/12/02/definitive-guide-copying-pasting-javascript/",title:"The Definitive Guide to Copying and Pasting in JavaScript"}]}),pointerAdaptation:new b({id:"pointer-adaptation",name:"Pointing Device Adaptation",description:['The <b>Interaction Media</b> part of CSS4 specification defines the media queries allowing web applications to alter its layout\n        and user interface depending on the way the user is supposed to interact with the application. It allows to identify the browser\'s primary\n        pointer (i.e. mouse, touch, keyboard) and decides whether it is fine or coarse and whether hovering over the element is possible using\n        the "classic" interface (like touch on tablet), so that the interface might be shrunk or enlarged and hover interactions enabled\n        or replaced with an alternative accordingly.',"Additionally, the specification defines the similar media queries for cases when all the pointing methods (not only the primary one)\n        should be considered - i.e. to answer the question is hovering possible at all, using any method available."],api:'<dl class="language-css">\n        <dt><code>@media (pointer: fine)</code></dt>\n        <dd>The media query that limits the enclosed CSS rules to be used only when the primary pointing device allows accurate pointing.</dd>\n        <dt><code>@media (pointer: coarse)</code></dt>\n        <dd>The media query that limits the enclosed CSS rules to be used only when the primary pointing device does not allow accurate pointing.</dd>\n        <dt><code>@media (pointer: none)</code></dt>\n        <dd>The media query that limits the enclosed CSS rules to be used only when the primary interacting device is not capable of pointing\n          (i.e. keyboard).</dd>\n        <dt><code>@media (hover)</code></dt>\n        <dd>The media query that limits the enclosed CSS rules to be used only when the primary pointing device allows hovering over elements.</dd>\n        <dt><code>@media (any-pointer: fine)</code></dt>\n        <dd>The media query that limits the enclosed CSS rules to be used only when any of the pointing devices available allows accurate pointing.</dd>\n        <dt><code>@media (any-pointer: coarse)</code></dt>\n        <dd>The media query that limits the enclosed CSS rules to be used only when any of the pointing devices does not allow accurate pointing.</dd>\n        <dt><code>@media (any-hover)</code></dt>\n        <dd>The media query that limits the enclosed CSS rules to be used only when any of the pointing devices allows hovering over elements.</dd>\n      </dl>',caniuse:"css-media-interaction",tests:[b.rawTest("window","matchMedia('(hover), not(hover)').matches",function(){return a.matchMedia&&a.matchMedia("(hover), not(hover)").matches})],demoPen:"pjdyoK",links:[{url:"http://www.w3.org/TR/mediaqueries-4/#mf-interaction",title:"Specification Draft"},{url:"http://jordanm.co.uk/2013/11/11/potential-use-cases-for-script-hover-and-pointer.html",title:"Potential use cases for script, hover and pointer CSS Level 4 Media Features"},{url:"https://dev.opera.com/articles/media-features/",title:"Dev.Opera: Interaction Media Features and their potential (for incorrect assumptions)"},{url:"https://github.com/twbs/mq4-hover-shim",title:"A shim for the Media Queries Level 4 `hover` media feature"},{url:"http://radar.oreilly.com/2015/08/proposing-css-input-modailty.html",title:"Proposing CSS input modality"}]}),deviceOrientation:new b({id:"device-orientation",name:"Device Orientation",description:['The <b>Device Orientation API</b> allows web applications to access the gyroscope and compass data in order to determine the orientation\n        of the user\'s device in all the three dimensions, expressed in degrees of divergence from the "natural" northbound lie flat position.','For the detection of the device\'s movements, see <a href="/accelerometer.html">Device Motions</a>.'],api:"<dl>\n        <dt><code>window.addEventListener('deviceorientation', listener)</code></dt>\n        <dd>An event fired when the significant changes in the device's orientation has occured.</dd>\n        <dt><code>event.alpha</code></dt>\n        <dd>Returns device's current heading (direction) in degrees, counted counterclockwise from the North (0) through West (90), South (180) and East (270).</dd>\n        <dt><code>event.beta</code></dt>\n        <dd>Returns device's current front/back tilt in degrees, 0 when lying horizontally upward facing, 90 when in vertical position,\n          -90 in vertical upside down, -180 when horizontal upside down.</dd>\n        <dt><code>event.gamma</code></dt>\n        <dd>Returns device's current left/right tilt in degrees, from -90 when turned left to 90 when turned right.</dd>\n      </dl>",caniuse:"deviceorientation",demoPen:"EVvyaw",tests:[b.windowContains("DeviceOrientationEvent")],links:[{url:"https://w3c.github.io/deviceorientation/spec-source-orientation.html",title:"Specification Draft"},{url:"http://www.html5rocks.com/en/tutorials/device/orientation/",title:"HTML5 Rocks: This End Up: Using Device Orientation"}]}),fullScreen:new b({id:"fullscreen",name:"Fullscreen",description:'The <b>Fullscreen API</b> allows web applications to present itself or the part of itself in the fullscreen mode,\n        without browser UI elements visible. It also serves as the prerequisite state for the <a href="/orientation-lock.html">orientation lock</a>.',api:"<dl>\n        <dt><code>document.fullscreenEnabled</code></dt>\n        <dd>Returns a boolean indicating whether the fullscreen mode is available and allowed.</dd>\n        <dt><code>element.requestFullscreen()</code></dt>\n        <dd>Requests a fullscreen mode display for a given <code>element</code>. Returns a <code>Promise</code> resolved when the request was successful.</dd>\n        <dt><code>document.fullscreenElement</code></dt>\n        <dd>Returns a reference to the element currently being displayed in the fullscreen mode.</dd>\n        <dt><code>document.exitFullscreen()</code></dt>\n        <dd>Exits the fullscreen mode.</dd>\n        <dt><code>document.addEventListener('fullscreenchange', listener)</code></dt>\n        <dd>An event fired when the fullscreen mode has been entered or exited.</dd>\n      </dl>",caniuse:"fullscreen",demoPen:"LpewpQ",tests:[b.containedIn("document.documentElement",a.document&&document.documentElement,"requestFullScreen"),b.containedIn("document.documentElement",a.document&&document.documentElement,"requestFullscreen")],links:[{url:"https://fullscreen.spec.whatwg.org/",title:"Specification"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API",title:"MDN: Fullscreen API"},{url:"https://hacks.mozilla.org/2012/01/using-the-fullscreen-api-in-web-browsers/",title:"Mozilla Hacks: Using the Fullscreen API in web browsers"}]}),orientationLock:new b({id:"orientation-lock",name:"Screen Orientation & Lock",description:["The <b>Screen Orientation API</b> allows web applications to get the information about the current orientation of the document\n        (portrait or landscape) as well as to lock the screen orientation in a requested state.","The current version of the specification defines this feature fully within <code>window.screen.orientation</code> object. The previous version,\n        still available in Microsoft Edge as of June 2017, separated the orientation lock to <code>window.screen.lockOrientation</code>."],api:"<dl>\n        <dt><code>window.screen.orientation.type</code></dt>\n        <dd>Returns the current screen orientation type as one of <code>portrait-primary</code>, <code>portrait-secondary</code> (upside down),\n          <code>landscape-primary</code> and <code>landscape-secondary</code> (upside down).</dd>\n        <dt><code>window.screen.orientation.addEventListener('change', listener)</code></dt>\n        <dd>An event fired when the document orientation has changed.</dd>\n        <dt><code>window.screen.orientation.lock(lockType)</code></dt>\n        <dd>Requests a screen lock in the <code>lockType</code> specified. Returns a <code>Promise</code> resolved when the lock was acquired successfully.</dd>\n        <dt><code>window.screen.orientation.unlock()</code></dt>\n        <dd>Removes previously acquired screen orientation lock.</dd>\n      </dl>",caniuse:"screen-orientation",demoPen:"EVbpeX",tests:[b.containedIn("screen",a.screen,"orientation"),b.containedIn("screen",a.screen,"lockOrientation",!1)],links:[{url:"https://w3c.github.io/screen-orientation/",title:"Specification Draft"},{url:"https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation",title:"MDN: Screen.orientation"},{url:"http://www.sitepoint.com/introducing-screen-orientation-api/",title:"SitePoint: Introducing the Screen Orientation API"}]}),wakeLock:new b({id:"wake-lock",name:"Wake Lock",description:["The <b>Wake Lock API</b> allows web applications to prevent the resource such as the screen or system from becoming\n        unavailable as long as the application holds a lock for that resource. The purpose of the API is to let the user or the application to complete\n        the ongoing long activity - like navigation or reading - uninterrupted.",'The only available implementation, available behind an "Experimental Web Platform Features" flag in Google Chrome on desktop, is just a boolean flag controllable by the application, \n        based on the previous version of the specification. It is now considered too open for abuse and is lacking user consent, so the recent specification draft\n        (published June 2017) proposes more explicit approach. It is not implemented by any vendor, yet.'],api:"<p><b>Newer specification</b></p>\n      <dl>\n        <dt><code>navigator.getWakeLock('screen')</code></dt>\n        <dd>Requests a wake lock managing object on the resource specified, such as <code>screen</code> or <code>system</code>. \n        Returns a <code>Promise</code> with the lock managing object.</dd>\n        <dt><code>lockRequest = lock.createRequest()</code></dt>\n        <dd>Activates the wake lock on the previously acquired managing object.</dd>\n        <dt><code>lockRequest.cancel()</code></dt>\n        <dd>Releases the existing lock.</dd>\n      </dl>\n      <p><b>Older specification</b></p>\n      <dl>\n        <dt><code>screen.keepAwake = true</code></dt>\n        <dd>The property allowing to acquire a screen wake lock when set to <code>true</code> and release it when set to <code>false</code>.</dd>\n      </dl>",demoPen:"XggJKK",tests:[b.containedIn("screen",a.screen,"keepAwake"),b.navigatorContains("getWakeLock")],links:[{url:"https://w3c.github.io/wake-lock/",title:"W3C Specification Draft"}]}),photos:new b({id:"photos",name:"Advanced Camera Controls",description:['The <b>Image Capture API</b> allows web applications to control the advanced settings of the device\'s camera, such as zoom, white balance, ISO or focus points and take photos based on these settings. It relies on the <code>streamVideoTrack</code> object that might be obtained from the <code>stream</code> - see <a href="/camera-microphone.html">Audio & Video Capture</a>.'],api:"<dl>\n        <dt><code>capturer = ImageCapture(streamVideoTrack)</code></dt>\n        <dd>Creates an image capturer out of the Media Stream Video Track.</dd>\n        <dt><code>capturer.takePhoto()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the photo taken with the current settings.</dd>\n        <dt><code>capturer.setOptions(photoSettings)</code></dt>\n        <dd>Configures the <code>photoSettings</code> for subsequent captures; if visible, the effects of the configuration can be seen in the Track used as input.</dd>\n      </dl>",tests:[b.windowContains("ImageCapture")],demoPen:"AXzVqV",links:[{url:"https://w3c.github.io/mediacapture-image/",title:"W3C Specification Draft"},{url:"https://developers.google.com/web/updates/2016/12/imagecapture",title:"Google Developers: Take Photos and Control Camera Settings"},{url:"https://rawgit.com/Miguelao/demos/master/imagecapture.html",title:"Demo"}]}),presentation:new b({id:"presentation",name:"Presentation Features",description:["The <b>Presentation API</b> aims at allowing web applications to use the presentation display mode. The display used to present\n        may be the same that the browser is using, but may also be the external display device. The browser might serve as the initiator\n        of the presentation as well as receive the connections to the presentations initiated externally on the presentation display.","The API at the moment is supported only in Chrome and Opera, on desktop and on Android."],api:"<dl>\n        <dt><code>navigator.presentation.defaultRequest = new PresentationRequest(presentationUrl)</code></dt>\n        <dd>Sets up an object representing the browser's request for initiating the specified presentation on a presentation display.</dd>\n        <dt><code>request.getAvailability()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the object providing availability of a presentation display.</dd>\n        <dt><code>availability.value</code></dt>\n        <dd>Returns a boolean indicating whether a presentation display is available.</dd>\n        <dt><code>availability.addEventListener('change', listener)</code></dt>\n        <dd>An event fired when the availability status of a presentation display has changed.</dd>\n        <dt><code>request.start()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the connection to the newly initiated presentation on the presentation display.</dd>\n        <dt><code>connection.state</code></dt>\n        <dd>Returns a string indicating the state of the presentation on the presentation display, i.e. <code>connected</code>, <code>closed</code>, <code>terminated</code>.</dd>\n        <dt><code>connection.addEventListener('statechange', listener)</code></dt>\n        <dd>An event fired when the state of the presentation on the presentation display has changed.</dd>\n        <dt><code>connection.send(message)</code></dt>\n        <dd>Sends a message to the presentation running on the presentation display.</dd>\n        <dt><code>connection.addEventListener('message', listener)</code></dt>\n        <dd>An event fired when a message from the presentation running on the presentation display has been received.</dd>\n        <dt><code>connection.close()</code></dt>\n        <dd>Closes the connection to the presentation running on the presentation display, letting it continue uninterrupted.</dd>\n        <dt><code>connection.terminate()</code></dt>\n        <dd>Terminates the presentation running on the presentation display.</dd>\n        <dt><code>navigator.presentation.receiver.getConnections()</code></dt>\n        <dd>Returns a <code>Promise</code> resolved with the array of connections to the presentations running on a presentation display.</dd>\n        <dt><code>navigator.presentation.receiver.addEventListener('connectionavailable', listener)</code></dt>\n        <dd>An event fired when the new connection to the presentations running on a presentation display has become available.</dd>\n      </dl>",tests:[b.navigatorContains("presentation"),b.windowContains("PresentationRequest")],links:[{url:"https://w3c.github.io/presentation-api/",title:"Specification Draft"},{url:"https://www.w3.org/community/webscreens/presentation-api-demos/",title:"Presentation API demos"},{url:"https://developers.google.com/web/updates/2015/11/presentation-api?hl=en",title:"Google Cast for Chrome on Android - using Presentation API underneath"}]}),backgroundSync:new b({id:"background-sync",name:"Background Sync",description:["The <b>Background Sync API</b> allows authorized web applications to not rely on having stable internet connection and defer sending the data to the moment the connection is available. The API is bound to the Service Worker, which is the code execution model that is separated from the owning web application. This allows the Background Sync to operate also after the application was closed.","As of Summer 2016, the API is implemented in Google Chrome only and the implementation is limited to one-off sync."],api:"<dl>\n        <dt><code>serviceWorkerRegistration.sync.register('syncTag')</code></dt>\n        <dd>Requests an one-off sync registration. Returns a <code>Promise</code> when the request has been accepted.</dd>\n        <dt><code>self.addEventListener('sync', listener)</code></dt>\n        <dd>An event fired within the Service Worker instance when there is a connection available and the synchronization is possible. The <code>listener</code> is expected to call <code>event.waitUntil(promise)</code> specifying a <code>Promise</code> that resolves when the sync handling is completed.</dd>\n        <dt><code>serviceWorkerRegistration.periodicSync.register(options)</code></dt>\n        <dd>Requests a periodic sync registration. Returns a <code>Promise</code> when the request has been accepted. This </dd>\n        <dt><code>self.addEventListener('periodicSync', listener)</code></dt>\n        <dd>An event fired within the Service Worker instance periodically, according to the registration optios, only when there is a connection available and the synchronization is possible. The <code>listener</code> is expected to call <code>event.waitUntil(promise)</code> specifying a <code>Promise</code> that resolves when the sync handling is completed.</dd> \n      </dl>",tests:[b.windowContains("SyncManager")],links:[{url:"https://wicg.github.io/BackgroundSync/spec/",title:"Specification Draft (non-W3C)"},{url:"https://developers.google.com/web/updates/2015/12/background-sync",title:"Google Developers: Introducing Background Sync"}]}),intents:new b({id:"app-communication",name:"Inter-App Communication",description:["There were several attempts to establish the universal, multi-platform, asynchronous way of data exchange from the web applications to native apps or another web apps and up to date no standardized solution was concieved.",'There are, however, some basic workarounds for sending data to another applications. Native applications can register handlers to receive data from the web apps using special URL prefixes (although differences exist between <a href="https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Inter-AppCommunication/Inter-AppCommunication.html#//apple_ref/doc/uid/TP40007072-CH6-SW1" target="_blank">iOS</a> and <a href="https://developer.android.com/training/app-links/index.html" target="_blank">Android</a>). There are also third-party non-standard services that coordinate sharing data between web applications.','Google Chrome 18 implemented the <b>Web Intents</b> experimental API. It was conceptually based on <a href="https://developer.android.com/guide/components/intents-filters.html" target="_blank">Android Intents</a> system. The apps interested in receiving data were required to be registered in Chrome Web Store and declare the intent support in the manifest file. The apps sending the data were able to invoke the Intent of the particular type and let the system handle the selection of the target application and its proper invocation. The API was removed in Chrome 24 because of various interoperability and usability issues. No other vendor implemented Web Intents.','The newest proposal, <b>Web Share API</b>, as of May 2017 implemented in Chrome on Android behind an experimental flag, is much simpler and consists of a method to invoke the platform-specific share mechanism and is limited to sharing named URLs only. There is a complementary <b>Web Share Target API</b> <a href="https://github.com/WICG/web-share-target" target="_blank">in an early design phase</a> to allow registering web applications as the share receivers.'],api:"<p><b>Web Intents API</b></p>\n      <dl>\n        <dt><code>intent = new Intent(action, type, href)</code></dt>\n        <dd>Creates an object representing the request for a particular action (command) to be sent to the registered handling applications.</dd>\n        <dt><code>navigator.startActivity(intent, onSuccess, onFailure)</code></dt>\n        <dd>Invokes the system-defined application selection and data share dialog to send the request to another application.</dd>\n        <dt><code>window.intent.postResult(result)</code></dt>\n        <dd>Sends the <code>result</code> from the requested (target) application back to the requesting (source) application.</dd>\n      </dl>\n      <p><b>Web Share API</b></p>\n      <dl>\n        <dt><code>navigator.share({name, title, url})</code></dt>\n        <dd>Invokes the system-defined application selection and data share dialog to send the named URL to another application and returns a <code>Promise</code> resolved when the share was successful.</dd>\n      </dl>",tests:[b.windowContains("Intent",!1),b.navigatorContains("share",!1)],demoPen:"kkaLOP",links:[{url:"https://www.w3.org/TR/web-intents/",title:"W3C Working Group Note about Web Intents"},{url:"https://www.chromium.org/developers/web-intents-in-chrome",title:"Web Intents in Chrome - description from 2012"},{url:"https://paul.kinlan.me/what-happened-to-web-intents/",title:"Paul Kinlan: What happened to Web Intents?"},{url:"https://paul.kinlan.me/navigator.share/",title:"Paul Kinlan: Simple sharing on the web with navigator.share"},{url:"https://github.com/mgiuca/web-share",title:"Web Share API notes"}]}),mediaRecorder:new b({id:"recording",name:"Recording Media",description:['The <b>Media Recorder API</b> is a Web API allowing web applications to record audio and video Media Streams, local and/or remote. It relies on the <code>mediaStream</code> object - see <a href="/camera-microphone.html">Audio & Video Capture</a>.'],api:"<dl>\n        <dt><code>recorder = new MediaRecorder(mediaStream, options)</code></dt>\n        <dd>Creates a media recorder out of a Media Stream. <code>options</code> selects e.g. the intended <code>MIME type</code> and/or the target bitrates.</dd>\n        <dt><code>MediaRecorder.isMimeTypeSupported(mimeType)</code></dt>\n        <dd>Static function checking if <code>mimeType</code> is, in principle, supported for recording.</dd>\n        <dt><code>recorder.start(interval)</code></dt>\n        <dd>Starts recording data, producing it as chunks in <code>ondataavailable</code>'s <code>event.data</code>, every <code>interval</code> ms, if explicited.</dd>\n      </dl>",tests:[b.windowContains("MediaRecorder")],caniuse:"mediarecorder",demoPen:"WGZkjm",links:[{url:"https://w3c.github.io/mediacapture-record/MediaRecorder.html",title:"Specification Draft"},{url:"https://webrtc.github.io/samples/src/content/getusermedia/record/",title:"Demo recording local data"}]}),realtime:new b({id:"realtime",name:"Real-Time Communication",description:['Real-Time Communication in the Web, <b>WebRTC</b> in short, is a set of APIs allowing web applications to send and receive streaming real-time video, audio and data to/from remote peers, without relying it through the centralized server. The server, implementing one of the specific signalling protocols, is needed for initial discovery and connection handshake, though. The APIs rely on the <code>mediaStream</code> object - see <a href="/camera-microphone.html">Audio & Video Capture</a>.'],api:"<dl>\n        <dt><code>connection = new RTCPeerConnection(configuration)</code></dt>\n        <dd>Creates a connection object that will be used to establish serverless connection between peers. The <code>configuration</code> may include the set of <code>iceServers</code> that will be used for discovery and connection handshake.</dd>\n        <dt><code>connection.addEventListener('icecandidate', listener)</code></dt>\n        <dd>An event fired when the signalling server registers a remote peer with which the connection may be established.</dd>\n        <dt><code>connection.addStream(localMediaStream)</code></dt>\n        <dd>Adds an existing local Media Stream (e.g. the local web cam) to the remote peer connection.</dd>\n        <dt><code>connection.onaddstream = event => video.src = URL.createObjectURL(event.stream)</code></dt>\n        <dd>Registers an <code>onaddstream</code> event handler that, if and when called, retrieves the remote party's Media Stream and plugs it into a &lt;video> tag <code>video</code>.</dd>\n        <dt><code>connection.createOffer(options)</code></dt>\n        <dd>Returns a <code>Promise</code> resolved when the remote peer connects to the connections and streams offered.</dd>\n        <dt><code>connection.createAnswer(options)</code></dt>\n        <dd>Accepts the connection offerred by the remote peer. Returns a <code>Promise</code> resolved when the connection is established.</dd>\n        <dt><code>dataChannel = connection.createDataChannel(label, configuration)</code></dt>\n        <dd>Opens a data channel for the connection, allowing it to transmit arbitrary types of data.</dd>\n        <dt><code>dataChannel.send(data)</code>\n        <dd>Sends the data over the data channel to the remote peer.</dd>\n        <dt><code>dataChannel.addEventListener('message', listener)</code></dt>\n        <dd>An event fired when the data has been received via the data channel.</dd>\n      </dl>",tests:[b.windowContains("RTCPeerConnection")],caniuse:"rtcpeerconnection",demoPen:"amoLwm",links:[{url:"https://w3c.github.io/webrtc-pc/",title:"Specification Draft"},{url:"http://www.html5rocks.com/en/tutorials/webrtc/basics/",title:"HTML5 Rocks: Getting started with WebRTC"},{url:"https://webrtc.github.io/samples/#peerconnection",title:"WebRTC RTCPeerConnection and RTCDataChannel samples"},{url:"https://webrtc.github.io/samples/src/content/peerconnection/pc1/",title:"Simple demo with loopback connection"}]}),geofencing:new b({id:"geofencing",name:"Geofencing",description:['The <b>Geofencing API</b> allow authorized web applications to define geographic areas and receive notifications when the device enters or leaves these areas without the need to periodically query the <a href="/geolocation.html">Geolocation API</a>. Thanks to the Service Worker being employed that allows code execution outside of the lifecycle of the owning web application, the notification may be also received while the app is not opened in the browser.',"As of August 2016, no vendor implemented the API and the proposal seems to be abandoned."],
api:"<dl>\n        <dt><code>region = new CircularGeofenceRegion({name, latitude, longitude, radius})</code></dt>\n        <dd>Creates a circular region definition with the coordinates and radius specified.</code></dt>\n        <dt><code>serviceWorkerRegistration.geofencing.add(region, options)</code></dt>\n        <dd>Sets up a region to be watched for and subscribes to the notification when the device enters or leaves the region.</dd>\n        <dt><code>self.addEventListener('geofenceenter', listener)</code></dt>\n        <dd>An event fired when the device enters one of the defined regions, provided as <code>event.geofence.region</code>.</dd>\n        <dt><code>self.addEventListener('geofenceleave', listener)</code></dt>\n        <dd>An event fired when the device leaves one of the defined regions, provided as <code>event.geofence.region</code>.</dd>\n      </dl>",tests:[b.windowContains("GeofenceManager")],links:[{url:"https://w3c.github.io/geofencing-api/",title:"Specification Draft"},{url:"https://bugs.chromium.org/p/chromium/issues/detail?id=383125",title:"Chrome Issue tracking the implementation trial and later removal"}]})};a.WWCD.container?a.WWCD.container.configure(function(a){return a.singletons({features:c})}):(a.features=c,a.groups=require("../../build/groups.json"))}(function(){var a="object"==typeof exports?exports:window;return a.WWCD=a.WWCD||{},a}()),function(a){var b=!1,c=function(a){var b=document.getElementById("support-info-placeholder-"+a.id);a.supported?b.innerHTML='<i class="mdi-navigation-check text-success"\n        title="'+a.name+' is available in your current browser" aria-label="Available in your browser"></i>':a.notSupported&&(b.innerHTML='<i class="mdi-navigation-close text-danger"\n        title="'+a.name+' is not available in your current browser" aria-label="Not available in your browser"></i>'),$(".legend").show()},d=function(a){Object.keys(a).forEach(function(b){return c(a[b])})},e=function(a){var c=a.templateEngine,e=a.features;c.annotateBody("features-list"),$(".features-list .btn").removeAttr("tabindex"),$(".hide-on-feature-page").attr("aria-expanded","true"),b||(d(e),b=!0)};a.configure(function(a){return a.singleton("indexPageCtrl",e)})}(WWCD.container),function(a){var b=function(a,b){var c=b.templateEngine,d=b.CaniuseReportFetch,e="feature",f=function(){return a.caniuseKey?new d(a).fetch():Promise.resolve()},g=function(){a.api&&Prism.highlightAll()},h=function(){if(a.demoPen&&window.__CPEmbed&&(window.__CPEmbed(),!window.location.protocol.startsWith("https"))){var b=$("iframe.cp_embed_iframe");b.attr("src","https:"+b.attr("src"))}},i=function(){var b=document.getElementById("tests-placeholder");if(a.tests.length){var c=a.tests.map(function(a){var b="default";a.result.passed?b=a.result.prefix||!a.result.standard?"warning":"success":a.result.standard&&(b="danger");var c=a.result.passed?"mdi-navigation-check":"mdi-navigation-close";return'<div class="feature-test bg-'+b+'">\n            <div class="pull-left"><code>'+a.containerName+"."+a.result.prefix+a.result.property+'</code></div>\n            <div class="pull-right"><i class="'+c+'"></i> '+a.result.message+"</div>\n          </div>"});b.innerHTML=c.join(""),b.parentNode.classList.remove("hidden")}else b.parentNode.classList.add("hidden")},j=function(){$(".features-list .btn").attr("tabindex","-1"),$(".hide-on-feature-page").attr("aria-expanded","false")},k=function(b){a.caniuseKey&&b.then(function(){return a.caniuseReport.initVisuals()}),g(),h(),i(),j()},l=c.targetElementFor(e);l.one("webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend",function(){if(l.height()){var a=$(".navbar").outerHeight(!0);$("html,body").animate({scrollTop:l.offset().top-a},500)}});var m=f();c.run(e,{feature:a}).then(function(){return k(m)})};a.configure(function(a){return a.singleton("featurePageCtrl",b)})}(WWCD.container),function(a){var b=function(a){window.ga&&(window.ga("set","page",a),window.ga("send","pageview"))},c=function(c){var d=c.indexPageCtrl,e=c.featurePageCtrl,f=c.features,g=location.pathname.split("/");g.pop(),page.base(g.join("/")),page(function(a,c){b(a.path),c()}),page("/",function(){return a.resolveAndCall(d)}),Object.keys(f).forEach(function(b){var c=f[b];page("/"+c.id+".html",function(){return a.resolveAndCall(e,c)})}),page()},d=function(b){var d=b.indexPageCtrl;a.resolveAndCall(d),a.resolveAndCall(c)};d(a.injector),"serviceWorker"in navigator&&navigator.serviceWorker.register("/sw.js")["catch"](function(a){console.warn("SW registration failed with "+a)})}(WWCD.container);